<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DW.CodedUI</name>
    </assembly>
    <members>
        <member name="T:DW.CodedUI.And">
            <summary>
            Defines all possibile settings to be used by searching for windows. See <see cref="T:DW.CodedUI.WindowFinder"/>.
            </summary>
        </member>
        <member name="M:DW.CodedUI.And.Timeout(System.UInt32)">
            <summary>
            The window should be searched again and again as long this timeout is not elapsed.
            </summary>
            <param name="milliseconds">The timeout in milliseconds.</param>
            <returns>A combinable And to be able to append additional settings.</returns>
        </member>
        <member name="M:DW.CodedUI.And.NoTimeout">
            <summary>
            The window should be searched just once.
            </summary>
            <returns>A combinable And to be able to append additional settings.</returns>
        </member>
        <member name="M:DW.CodedUI.And.Assert">
            <summary>
            If the window is not found an exception has to be thrown.
            </summary>
            <returns>A combinable And to be able to append additional settings.</returns>
        </member>
        <member name="M:DW.CodedUI.And.NoAssert">
            <summary>
            If the window is not found no exception has to be thrown. In this case the Search returns null.
            </summary>
            <returns>A combinable And to be able to append additional settings.</returns>
        </member>
        <member name="M:DW.CodedUI.And.InstanceNumber(System.UInt32)">
            <summary>
            If multiple windows got found the N. window get returned.
            </summary>
            <param name="instanceNumber">The instance number N.</param>
            <returns>A combinable And to be able to append additional settings.</returns>
        </member>
        <member name="M:DW.CodedUI.And.Interval(System.UInt32)">
            <summary>
            The WindowFinder is searching for windows again and again as soon the timeout is not ellapsed. This defines the wait time beween each search run.
            </summary>
            <param name="milliseconds">The wait time in milliseconds between the searches</param>
            <returns>A combinable And to be able to append additional settings.</returns>
        </member>
        <member name="M:DW.CodedUI.And.NoInterval">
            <summary>
            The WindowFinder is searching for windows again and again as soon the timeout is not ellapsed. This defines that there is no wait time between each search run.
            </summary>
            <returns>A combinable And to be able to append additional settings.</returns>
        </member>
        <member name="T:DW.CodedUI.At">
            <summary>
            Describes the relative position inside a control.
            </summary>
        </member>
        <member name="M:DW.CodedUI.At.Left(System.Double)">
            <summary>
            Returns the relative position from the left border of the control.
            </summary>
            <param name="x">The distance from the left.</param>
            <returns>Instance of the position object.</returns>
        </member>
        <member name="M:DW.CodedUI.At.TopLeft(System.Double,System.Double)">
            <summary>
            Returns the relative position from the top left corner of the control.
            </summary>
            <param name="x">The distance from the left.</param>
            <param name="y">The distance from the top.</param>
            <returns>Instance of the position object.</returns>
        </member>
        <member name="M:DW.CodedUI.At.Top(System.Double)">
            <summary>
            Returns the relative position from the top border of the control.
            </summary>
            <param name="y">The distance from the top.</param>
            <returns>Instance of the position object.</returns>
        </member>
        <member name="M:DW.CodedUI.At.TopRight(System.Double,System.Double)">
            <summary>
            Returns the relative position from the top right corner of the control.
            </summary>
            <param name="x">The distance from the right.</param>
            <param name="y">The distance from the top.</param>
            <returns>Instance of the position object.</returns>
        </member>
        <member name="M:DW.CodedUI.At.Right(System.Double)">
            <summary>
            Returns the relative position from the right border or the control.
            </summary>
            <param name="x">The distance from the right.</param>
            <returns>Instance of the position object.</returns>
        </member>
        <member name="M:DW.CodedUI.At.BottomRight(System.Double,System.Double)">
            <summary>
            Returns the relative position from the bottom right corner of the control.
            </summary>
            <param name="x">The distance from the right.</param>
            <param name="y">The distance from the bottom.</param>
            <returns>Instance of the position object.</returns>
        </member>
        <member name="M:DW.CodedUI.At.Bottom(System.Double)">
            <summary>
            Returns the relative position from the bottom border of the control.
            </summary>
            <param name="y">The distance from the bottom.</param>
            <returns>Instance of the position object.</returns>
        </member>
        <member name="M:DW.CodedUI.At.BottomLeft(System.Double,System.Double)">
            <summary>
            Returns the relative position from the bottom left corner of the control.
            </summary>
            <param name="x">The distance from the left.</param>
            <param name="y">The distance from the bottom.</param>
            <returns>Instance of the position object.</returns>
        </member>
        <member name="M:DW.CodedUI.At.ToString">
            <summary>
            Provides a description of the relative position.
            </summary>
            <returns>A description of the relative position.</returns>
        </member>
        <member name="T:DW.CodedUI.BasicElementExtensions">
            <summary>
            Appends methods for searching a child, children or a parent control with the original element as the from element.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElementExtensions.GetChild``1(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.By)">
            <summary>
            Searches for a given child element with the passed By conditions. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <typeparam name="TControl">The UI element type to search for.</typeparam>
            <param name="basicElement">The current basic element.</param>
            <param name="by">Provides the conditions to be used by searching the UI element.</param>
            <returns>The found control if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.BasicElementExtensions.GetChild``1(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.By,DW.CodedUI.With)">
            <summary>
            Searches for a given child element with the passed By conditions and With settings. If not disabled With.Timeout(10000).And.Assert() gets appended.
            </summary>
            <typeparam name="TControl">The UI element type to search for.</typeparam>
            <param name="basicElement">The current basic element.</param>
            <param name="by">Provides the conditions to be used by searching the UI element.</param>
            <param name="with">The settings to be used while searching.</param>
            <returns>The found control if any; otherwise an exception if it is not disabled. If it is disabled null gets returned.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found. (If not disabled.)</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.BasicElementExtensions.GetChild(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.By)">
            <summary>
            Searches for a given child element with the passed By conditions. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <param name="basicElement">The current basic element.</param>
            <param name="by">Provides the conditions to be used by searching the UI element.</param>
            <returns>The found control if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.BasicElementExtensions.GetChild(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.By,DW.CodedUI.With)">
            <summary>
            Searches for a given child element with the passed By conditions and With settings. If not disabled With.Timeout(10000).And.Assert() gets appended.
            </summary>
            <param name="basicElement">The current basic element.</param>
            <param name="by">Provides the conditions to be used by searching the UI element.</param>
            <param name="with">The settings to be used while searching.</param>
            <returns>The found control if any; otherwise an exception if it is not disabled. If it is disabled null gets returned.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found. (If not disabled.)</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.BasicElementExtensions.GetChildren``1(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.By)">
            <summary>
            Returns all child elements which passes the By conditions. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <typeparam name="TControl">The UI element types to search for.</typeparam>
            <param name="basicElement">The current basic element.</param>
            <param name="by">Provides the conditions to be used by searching the UI elements.</param>
            <returns>A list of found child elements if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">The UI element could not be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.BasicElementExtensions.GetChildren``1(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.By,DW.CodedUI.With)">
            <summary>
            Returns all child elements which passes the By conditions and With settings. If not disabled With.Timeout(10000).And.Assert() gets appended.
            </summary>
            <typeparam name="TControl">The UI element types to search for.</typeparam>
            <param name="basicElement">The current basic element.</param>
            <param name="by">Provides the conditions to be used by searching the UI elements.</param>
            <param name="with">The settings to be used while searching.</param>
            <returns>A list of found child elements if any; otherwise an exception if it is not disabled. If it is disabled an empty list gets returned.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">The UI element could not be found. (If not disabled.)</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.BasicElementExtensions.GetChildren(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.By)">
            <summary>
            Returns all child elements which passes the By conditions. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <param name="basicElement">The current basic element.</param>
            <param name="by">Provides the conditions to be used by searching the UI elements.</param>
            <returns>A list of found child elements if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">The UI element could not be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.BasicElementExtensions.GetChildren(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.By,DW.CodedUI.With)">
            <summary>
            Returns all child elements which passes the By conditions and With settings. If not disabled With.Timeout(10000).And.Assert() gets appended.
            </summary>
            <param name="basicElement">The current basic element.</param>
            <param name="by">Provides the conditions to be used by searching the UI elements.</param>
            <param name="with">The settings to be used while searching.</param>
            <returns>A list of found child elements if any; otherwise an exception if it is not disabled. If it is disabled an empty list gets returned.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">The UI element could not be found. (If not disabled.)</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.BasicElementExtensions.GetParent(DW.CodedUI.BasicElements.BasicElement)">
            <summary>
            Returns the parent element of the current basic element. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <param name="basicElement">The current basic element.</param>
            <returns>The available parent control if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.BasicElementExtensions.GetParent(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.With)">
            <summary>
            Returns the parent element of the current basic element. If not disabled With.Assert().And.Timeout(10000) gets appended.
            </summary>
            <param name="basicElement">The current basic element.</param>
            <param name="with">The settings to be used while searching.</param>
            <returns>The found parent control if any; otherwise an exception if it is not disabled. If it is disabled null gets returned.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found. (If not disabled.)</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.BasicElementExtensions.GetParent``1(DW.CodedUI.BasicElements.BasicElement)">
            <summary>
            Returns the parent element of the current basic element. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <typeparam name="TControl">The UI element type to search for.</typeparam>
            <param name="basicElement">The current basic element.</param>
            <returns>The available parent control if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.BasicElementExtensions.GetParent``1(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.With)">
            <summary>
            Returns the parent element of the current basic element. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <typeparam name="TControl">The UI element type to search for.</typeparam>
            <param name="basicElement">The current basic element.</param>
            <param name="with">The settings to be used while searching.</param>
            <returns>The available parent control if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.BasicElementExtensions.GetParent(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.By)">
            <summary>
            Returns the parent element of the current basic element. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <param name="basicElement">The current basic element.</param>
            <param name="by">Provides the conditions to be used by searching the UI element.</param>
            <returns>The available parent control if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.BasicElementExtensions.GetParent(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.By,DW.CodedUI.With)">
            <summary>
            Returns the parent element of the current basic element. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <param name="basicElement">The current basic element.</param>
            <param name="by">Provides the conditions to be used by searching the UI element.</param>
            <param name="with">The settings to be used while searching.</param>
            <returns>The available parent control if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.BasicElementExtensions.GetParent``1(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.By)">
            <summary>
            Returns the parent element of the current basic element. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <typeparam name="TControl">The UI element type to search for.</typeparam>
            <param name="basicElement">The current basic element.</param>
            <param name="by">Provides the conditions to be used by searching the UI element.</param>
            <returns>The available parent control if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.BasicElementExtensions.GetParent``1(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.By,DW.CodedUI.With)">
            <summary>
            Returns the parent element of the current basic element. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <typeparam name="TControl">The UI element type to search for.</typeparam>
            <param name="basicElement">The current basic element.</param>
            <param name="by">Provides the conditions to be used by searching the UI element.</param>
            <param name="with">The settings to be used while searching.</param>
            <returns>The available parent control if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="T:DW.CodedUI.BasicElements.AutomationElementInfo">
            <summary>
            Represents information about an UI control.
            </summary>
            <remarks>This object is intended to be used in the ElementFinder.</remarks>
        </member>
        <member name="M:DW.CodedUI.BasicElements.AutomationElementInfo.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.AutomationElementInfo"/> class
            </summary>
            <param name="element">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.AutomationElementInfo.ToString">
            <summary>
            Provides a good visible feedback of the control.
            </summary>
            <returns>A good name of the control with the automation ID if any.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.AutomationElementInfo.AutomationElement">
            <summary>
            Gets the automation control.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.AutomationElementInfo.Children">
            <summary>
            Gets all available child controls.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.AutomationElementInfo.AutomationId">
            <summary>
            Gets the automation ID of the control if available; otherwise "&lt;no automation id&gt;" or "&lt;element is gone&gt;". Consider using <see cref="P:DW.CodedUI.BasicElements.AutomationElementInfo.HasAutomationId"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.AutomationElementInfo.Name">
            <summary>
            Gets the name of the control if available; otherwise "&lt;no aname&gt;" or "&lt;element is gone&gt;".
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.AutomationElementInfo.HasAutomationId">
            <summary>
            Gets a value that indicated if the control has an automation id.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.AutomationElementInfo.IsSelected">
            <summary>
            Gets or sets a value that indicates of the element is selected.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.AutomationElementInfo.IsAvailable">
            <summary>
            Gets a value that indicates of the the control is still available.
            </summary>
        </member>
        <member name="E:DW.CodedUI.BasicElements.AutomationElementInfo.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicBrowseFolderDialog">
            <summary>
            Represents the BrowseFolderDialog.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicDialog">
            <summary>
            Represends windows own dialogs.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicWindowBase">
            <summary>
            Represents the base for the <see cref="T:DW.CodedUI.BasicElements.BasicWindow"/> and <see cref="T:DW.CodedUI.BasicElements.BasicMessageBox"/>.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicElement">
            <summary>
            Represents a UI control.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicElement.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicElement"/> class.
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicElement.WaitForControlEnabled">
            <summary>
            Waits that the control enables.
            </summary>
            <remarks>It waits a maximum of 30 seconds and checks every 100 milliseconds the state.</remarks>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicElement.WaitForControlEnabled(System.TimeSpan)">
            <summary>
            Waits that the control enables.
            </summary>
            <param name="timeout">The timeout.</param>
            <remarks>It checks every 100 milliseconds the state.</remarks>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicElement.WaitForControlEnabled(System.TimeSpan,System.TimeSpan)">
            <summary>
            Waits that the control enables.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="waitCycle">The interval for check the IsEnabled state.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicElement.WaitForControlVisible">
            <summary>
            Waits that the control gets visible.
            </summary>
            <remarks>It waits a maximum of 30 seconds and checks every 100 milliseconds the state.</remarks>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicElement.WaitForControlVisible(System.TimeSpan)">
            <summary>
            Waits that the control gets visible.
            </summary>
            <param name="timeout">The timeout.</param>
            <remarks>It checks every 100 milliseconds the state.</remarks>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicElement.WaitForControlVisible(System.TimeSpan,System.TimeSpan)">
            <summary>
            Waits that the control gets visible.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="waitCycle">The interval for check the IsVisible state.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicElement.BeginHighlight">
            <summary>
            Shows up the control highlight.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicElement.EndHighlight">
            <summary>
            Removes the highlight.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicElement.ToString">
            <summary>
            Provides a good visible feedback of the control.
            </summary>
            <returns>A good name of the control with the automation ID if any.</returns>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicElement.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicElement.FillData(DW.CodedUI.BasicElements.Data.BasicElementData)">
            <summary>
            Fills the given BasicElementData object with the properties of the BasicElement.
            </summary>
            <param name="data">The BasicElementData to fill.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicElement.GetSafeData``1(System.Func{``0})">
            <summary>
            Tries to reload the given data. default(T) if it crashes.
            </summary>
            <typeparam name="T">The type of the property to read.</typeparam>
            <param name="data">The function to read the property.</param>
            <returns>The property data; default(T) if it crashes.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicElement.AutomationElement">
            <summary>
            Gets the automation control.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicElement.SupportedPatterns">
            <summary>
            Gets an array or supported patterns.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicElement.Properties">
            <summary>
            Gets the properties of the current control.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicElement.AutomationId">
            <summary>
            Gets the automation ID.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicElement.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicElement.IsVisible">
            <summary>
            Gets a value that indicates if the control is visible.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicElement.IsEnabled">
            <summary>
            Gets of the control is enabled
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicElement.IsAvailable">
            <summary>
            Gets a value that indicates if the control is still available.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicElement.Do">
            <summary>
            Gets a combinable Do to be able to append additional settings.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicWindowBase.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicWindow"/> class.
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicWindowBase.GetParentWindow(System.Boolean)">
            <summary>
            Gets the parent (owner) window if any.
            </summary>
            <param name="assert">Indicates if an exception has to be thrown if the window has no parent (owner).</param>
            <returns>The parent (owner) window if any; otherwise null.</returns>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicWindowBase.Equals(System.Object)">
            <summary>
            Checks if the given object is the same window by comparing the window handle.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if the given object is a BasicWindowBase with the same NativeWindowHandle; otherwise false.</returns>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicWindowBase.GetHashCode">
            <summary>
            Returns a hashcode which represents this window object. The NativeWindowHandle will be used.
            </summary>
            <returns>The hashcode which represents this window.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicWindowBase.CloseButton">
            <summary>
            Gets the close button in the title bar of the normalized window.
            </summary>
            <remarks>Currently the button can be found only on English or German systems and if the <see cref="P:DW.CodedUI.BasicElements.BasicWindow.WindowState"/> is <see cref="F:DW.CodedUI.WindowState.Normal"/>. If the system is another language consider using the <see cref="T:DW.CodedUI.UI"/> object with searching with <see cref="M:DW.CodedUI.By.Name(System.String)"/>.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicWindowBase.TitleBar">
            <summary>
            Gets the title bar of the window.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicWindowBase.Title">
            <summary>
            Gets the title of the window.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicWindowBase.OwningProcess">
            <summary>
            Gets the process the current window belongs to.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicWindowBase.CanClicked">
            <summary>
            Gets a value that indicates if the window can be clicked or not. This is false if the window is disabled e.g. if a modal window is opened.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicDialog.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicWindow"/> class.
            </summary>
            <param name="automationElement">The automation control</param>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicDialog.Unsafe">
            <summary>
            Gets access to unsafe methods
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicDialog.UnsafeMethods">
            <summary>
            Contains unsafe methods for interact with the control directly
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicDialog.UnsafeMethods.Close">
            <summary>
            Closes the dialog.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicBrowseFolderDialog.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicBrowseFolderDialog"/> class.
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicBrowseFolderDialog.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicBrowseFolderDialog.DescriptionText">
            <summary>
            Gets the descripton text.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicBrowseFolderDialog.NewFolderButton">
            <summary>
            Gets the new folder button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicBrowseFolderDialog.OKButton">
            <summary>
            Gets the OK button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicBrowseFolderDialog.CancelButton">
            <summary>
            Gets the Cancel button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicBrowseFolderDialog.FolderTree">
            <summary>
            Gets the tree for selecting a folder.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicButton">
            <summary>
            Represents a button.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicButton.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicButton"/> class.
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicButton.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicButton.Unsafe">
            <summary>
            Gets access to unsafe methods.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicButton.Text">
            <summary>
            Gets the text written in the Button.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicButton.UnsafeMethods">
            <summary>
            Contains unsafe methods for interact with the control directly.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicButton.UnsafeMethods.Click">
            <summary>
            Invokes a click on the Button.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicCheckBox">
            <summary>
            Represents a CheckBox.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicCheckBox.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicCheckBox"/> class.
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicCheckBox.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicCheckBox.Unsafe">
            <summary>
            Gets access to unsafe methods.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicCheckBox.IsChecked">
            <summary>
            Gets a value that indicates if the CheckBox is checked.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicCheckBox.Text">
            <summary>
            Gets the text written in the CheckBox.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicCheckBox.UnsafeMethods">
            <summary>
            Contains unsafe methods for interact with the control directly.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicCheckBox.UnsafeMethods.Toggle">
            <summary>
            Changes the IsChecked state.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicColorPickerDialog">
            <summary>
            Represents a ColorPickerDialog.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicWindow">
            <summary>
            Represents a window.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicWindow.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicWindow"/> class
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicWindow.GetChildWindows">
            <summary>
            Returns a collection of open and visible child windows if any; otherwise an empty list.
            </summary>
            <returns>List of open and visible child BasicWindow objects ready for UI tests.</returns>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicWindow.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicWindow.Unsafe">
            <summary>
            Gets access to unsafe methods.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicWindow.MaximizeButton">
            <summary>
            Gets the maximize button in the title bar of the normalized window.
            </summary>
            <remarks>Currently the button can be found only on English or German systems and if the <see cref="P:DW.CodedUI.BasicElements.BasicWindow.WindowState"/> is <see cref="F:DW.CodedUI.WindowState.Normal"/>. If the system is another language consider using the <see cref="T:DW.CodedUI.UI"/> object with searching with <see cref="M:DW.CodedUI.By.Name(System.String)"/>.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicWindow.RestoreButton">
            <summary>
            Gets the restore button in the title bar of the maximized window.
            </summary>
            <remarks>Currently the button can be found only on English or German systems and if the <see cref="P:DW.CodedUI.BasicElements.BasicWindow.WindowState"/> is <see cref="F:DW.CodedUI.WindowState.Maximized"/>. If the system is another language consider using the <see cref="T:DW.CodedUI.UI"/> object with searching with <see cref="M:DW.CodedUI.By.Name(System.String)"/>.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicWindow.MinimizeButton">
            <summary>
            Gets the minimize button in the title bar.
            </summary>
            <remarks>Currently the button can be found only on English or German systems. If the system is another language consider using the <see cref="T:DW.CodedUI.UI"/> object with searching with <see cref="M:DW.CodedUI.By.Name(System.String)"/>.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicWindow.WindowState">
            <summary>
            Gets the the actual window state.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicWindow.UnsafeMethods">
            <summary>
            Contains unsafe methods for interact with the control directly.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicWindow.UnsafeMethods.Maximize">
            <summary>
            Maximizes the window.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicWindow.UnsafeMethods.Minimize">
            <summary>
            Minimizes the window.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicWindow.UnsafeMethods.Normalize">
            <summary>
            Normalizes the window.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicWindow.UnsafeMethods.Close">
            <summary>
            Closes the window.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicWindow.UnsafeMethods.SetState(DW.CodedUI.WindowState)">
            <summary>
            Sets the new state of the window.
            </summary>
            <param name="windowState">The new state of the window.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicWindow.UnsafeMethods.SetSize(System.Drawing.Size)">
            <summary>
            Sets the new size of the window.
            </summary>
            <param name="size">The new site of the window.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicWindow.UnsafeMethods.SetPosition(System.Drawing.Point)">
            <summary>
            Sets the new position of the window.
            </summary>
            <param name="position">The new position of the window.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicWindow.UnsafeMethods.SetRect(System.Drawing.Rectangle)">
            <summary>
            Sets the new size and position of a window.
            </summary>
            <param name="rect">The new position and size of the window.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicColorPickerDialog.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicColorPickerDialog"/> class
            </summary>
            <param name="automationElement">The automation control</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicColorPickerDialog.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicColorPickerDialog.ColorsSection">
            <summary>
            Gets the section where all square colors are selectable.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicColorPickerDialog.DefineColorsButton">
            <summary>
            Gets the button to expand the section where custom colors can be defined.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicColorPickerDialog.ColorPickSection">
            <summary>
            Gets the section where the user can pick the color out of gradients.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicColorPickerDialog.ColorGradientSection">
            <summary>
            Gets the section where the user can chose the color brightness with s kind of slider.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicColorPickerDialog.ColorDisplaySection">
            <summary>
            Gets the secion where the current user color is shown.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicColorPickerDialog.ColorShadeTextBox">
            <summary>
            Gets the text box where the color shade value is written in.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicColorPickerDialog.ColorChromaTextBox">
            <summary>
            Gets the text box where the color chroma value is written in.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicColorPickerDialog.ColorBrightnessTextBox">
            <summary>
            Gets the text box where the color brightness value is written in.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicColorPickerDialog.RedTextBox">
            <summary>
            Gets the text box where the red color value is written in.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicColorPickerDialog.GreenTextBox">
            <summary>
            Gets the text box where the green color value is written in.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicColorPickerDialog.BlueTextBox">
            <summary>
            Gets the text box where the blue color value is written in.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicColorPickerDialog.ApplyColorButton">
            <summary>
            Gets the button to apply custom colors.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicColorPickerDialog.OKButton">
            <summary>
            Gets the OK button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicColorPickerDialog.CancelButton">
            <summary>
            Gets the Cancel button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicColorPickerDialog.HelpButton">
            <summary>
            Gets the help button.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicComboBox">
            <summary>
            Represents a ComboBox.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicComboBox.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicComboBox"/> class
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicComboBox.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicComboBox.Unsafe">
            <summary>
            Gets access to unsafe methods.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicComboBox.SelectedItem">
            <summary>
            Gets the selected item if any; otherwise null.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicComboBox.Items">
            <summary>
            Gets all created items. In WPF child elements gets created first if the ComboBox has been opened once.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicComboBox.Text">
            <summary>
            Gets the text from the selected child if set; otherwise the written text.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicComboBox.IsReadOnly">
            <summary>
            Gets a value that indicates if the ComboBox is readonly or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicComboBox.IsExpanded">
            <summary>
            Gets a value that indicates if the ComboBox is expanded or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicComboBox.VerticalScrollPercent">
            <summary>
            Gets the current vertical scroll position; -1 if nothing has to scroll.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicComboBox.VerticalViewSize">
            <summary>
            Gets the current vertical view size in percent.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicComboBox.VerticallyScrollable">
            <summary>
            Gets a value that indicates if the drop down content can scroll vertically.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicComboBox.UnsafeMethods">
            <summary>
            Contains unsafe methods for interact with the control directly.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicComboBox.UnsafeMethods.Expand">
            <summary>
            Expands the ComboBox.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicComboBox.UnsafeMethods.Collapse">
            <summary>
            Collapses the ComboBox.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicComboBox.UnsafeMethods.SetValue(System.String)">
            <summary>
            Sets the value if the ComboBox is editable.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicComboBox.UnsafeMethods.SetScrollPercent(System.Double)">
            <summary>
            Sets the vertical scroll position.
            </summary>
            <param name="verticalPercent">The percentual value to set.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicComboBox.UnsafeMethods.ScrollVertical(System.Windows.Automation.ScrollAmount)">
            <summary>
            Scrolls up or down; Small is just like arrow up/down; Large is like page up/down.
            </summary>
            <param name="amount">The amount of lines to scroll</param>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicComboBoxItem">
            <summary>
            Represents a ComboBoxItem.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicComboBoxItem.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicComboBoxItem"/> class.
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicComboBoxItem.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicComboBoxItem.Unsafe">
            <summary>
            Gets access to unsafe methods.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicComboBoxItem.IsSelected">
            <summary>
            Gets a value that indicates if the ComboBoxItem is selected or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicComboBoxItem.Text">
            <summary>
            Gets the text written in the ComboBoxItem.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicComboBoxItem.UnsafeMethods">
            <summary>
            Contains unsafe methods for interact with the control directly.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicComboBoxItem.UnsafeMethods.Select">
            <summary>
            Selects the ComboBoxItem.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicComboBoxItem.UnsafeMethods.Deselect">
            <summary>
            Deselect the ComboBoxItem.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicComboBoxItem.UnsafeMethods.ScrollIntoView">
            <summary>
            Scrolls to the ComboBoxItem.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicEdit">
            <summary>
            Represents a TextBox or RichTextBox.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicEdit.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicEdit"/> class.
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicEdit.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicEdit.Unsafe">
            <summary>
            Gets access to unsafe methods.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicEdit.Text">
            <summary>
            Gets the written text in the [Rich]TextBox.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicEdit.SelectedText">
            <summary>
            Gets the selected text in the [Rich]TextBox.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicEdit.IsReadOnly">
            <summary>
            Gets a value that indicates if the [Rich]TextBox is read only or not.
            </summary>
            <remarks>Not supported for a RichTextBox.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicEdit.SupportedTextSelection">
            <summary>
            Gets a value that indicates how text can be selected.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicEdit.HorizontalScrollPercent">
            <summary>
            Gets the current vertical scroll position; -1 if nothing has to scroll.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicEdit.HorizontalViewSize">
            <summary>
            Gets the current horizontal view size in percent.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicEdit.HorizontallyScrollable">
            <summary>
            Gets a value that indicates if the [Rich]TextBox can scroll horizontally.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicEdit.VerticalScrollPercent">
            <summary>
            Gets the current vertical scroll position; -1 if nothing has to scroll. 
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicEdit.VerticalViewSize">
            <summary>
            Gets the current vertical view size in percent.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicEdit.VerticallyScrollable">
            <summary>
            Gets a value that indicates if the [Rich]TextBox can scroll vertically.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicEdit.UnsafeMethods">
            <summary>
            Contains unsafe methods for interact with the control directly.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicEdit.UnsafeMethods.SetValue(System.String)">
            <summary>
            Sets the text into the TextBox.
            </summary>
            <param name="value">The value to set.</param>
            <remarks>Not supported for a RichTextBox.</remarks>
            <exception cref="T:System.NotSupportedException">The control does not support to set the value with the unsafe method.</exception>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicEdit.UnsafeMethods.Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)">
            <summary>
            Scrolls inside the visible range; Small is just like arrow up/down; Large is like page up/down.
            </summary>
            <param name="horizontalAmount">The amount of characters to scroll.</param>
            <param name="verticalAmount">The amount of lines to scroll.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicEdit.UnsafeMethods.ScrollHorizontal(System.Windows.Automation.ScrollAmount)">
            <summary>
            Scrolls inside the visible range horizontal; Small is just like arrow up/down; Large is like page up/down.
            </summary>
            <param name="amount">The amount of characters to scroll.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicEdit.UnsafeMethods.ScrollVertical(System.Windows.Automation.ScrollAmount)">
            <summary>
            Scrolls inside the visible range vertical; Small is just like arrow up/down; Large is like page up/down.
            </summary>
            <param name="amount">The amount of lines to scroll.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicEdit.UnsafeMethods.SetScrollPercent(System.Double,System.Double)">
            <summary>
            Sets the horizontal and vertical scroll position.
            </summary>
            <param name="horizontalPercent">The horizontal percentual value to set.</param>
            <param name="verticalPercent">The vertical percentual value to set.</param>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicExpander">
            <summary>
            Represents an Expander.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicExpander.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicExpander"/> class.
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicExpander.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicExpander.Unsafe">
            <summary>
            Gets access to unsafe methods.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicExpander.IsExpanded">
            <summary>
            Gets a value that indicates if the Expander it is expanded or not.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicExpander.UnsafeMethods">
            <summary>
            Contains unsafe methods for interact with the control directly.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicExpander.UnsafeMethods.Expand">
            <summary>
            Expands the Expander.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicExpander.UnsafeMethods.Collapse">
            <summary>
            Collapses the Expander.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicFontPickerDialog">
            <summary>
            Represents the FontPickerDialog.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicFontPickerDialog.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicFontPickerDialog"/> class.
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicFontPickerDialog.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicFontPickerDialog.FontNameSection">
            <summary>
            Gets the section for selecting the font name.
            </summary>
            <remarks>This is an different displayed ComboBox.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicFontPickerDialog.FontNameTextBox">
            <summary>
            Gets the text box where the font name is written in.
            </summary>
            <remarks>This is the text box of a writable ComboBox.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicFontPickerDialog.FontNameList">
            <summary>
            Gets the list of available font names.
            </summary>
            <remarks>This is the open drop down of a ComboBox.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicFontPickerDialog.FontStyleSection">
            <summary>
            Gets the section for selecting the font style.
            </summary>
            <remarks>This is an different displayed ComboBox.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicFontPickerDialog.FontStyleTextBox">
            <summary>
            Gets the text box where the font style is written in.
            </summary>
            <remarks>This is the text box of a writable ComboBox.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicFontPickerDialog.FontStyleList">
            <summary>
            Gets the list of available font styles.
            </summary>
            <remarks>This is the open drop down of a ComboBox.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicFontPickerDialog.FontSizeSection">
            <summary>
            Gets the section for selecting the font size.
            </summary>
            <remarks>This is an different displayed ComboBox.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicFontPickerDialog.FontSizeTextBox">
            <summary>
            Gets the text box where the font size is written in.
            </summary>
            <remarks>This is the text box of a writable ComboBox.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicFontPickerDialog.FontSizeList">
            <summary>
            Gets the list of available font sizes.
            </summary>
            <remarks>This is the open drop down of a ComboBox.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicFontPickerDialog.LineThroughCheckBox">
            <summary>
            Gets the CheckBox which defines if the font has to be line through.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicFontPickerDialog.UnderlineCheckBox">
            <summary>
            Gets the CheckBox which defines if the font has to be underlined.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicFontPickerDialog.FontColorComboBox">
            <summary>
            Gets the ComboBox to select the font color.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicFontPickerDialog.ScriptComboBox">
            <summary>
            Gets the ComboBox to select the font script value.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicFontPickerDialog.OKButton">
            <summary>
            Gets the OK button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicFontPickerDialog.CancelButton">
            <summary>
            Gets the Cancel button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicFontPickerDialog.ApplyButton">
            <summary>
            Gets the Apply button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicFontPickerDialog.HelpButton">
            <summary>
            Gets the Help button.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicList">
            <summary>
            Represents a ListBox or ListView.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicList.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicList"/> class.
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicList.GetItem(System.Int32,System.Int32)">
            <summary>
            Returns the BasicElement from the cell.
            </summary>
            <param name="row">The item row.</param>
            <param name="column">The item column.</param>
            <returns>The BasicElement.</returns>
            <remarks>Not supported for a ListBox.</remarks>
            <exception cref="T:System.NotSupportedException">The element does not support GetItem.</exception>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicList.GetColumnHeaders">
            <summary>
            Returns the column headers of the ListView.
            </summary>
            <returns>The column headers.</returns>
            <remarks>Not supported for a ListBox.</remarks>
            <exception cref="T:System.NotSupportedException">The element does not support GetColumnHeaders.</exception>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicList.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicList.Unsafe">
            <summary>
            Gets access to unsafe methods.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicList.CanMultiSelect">
            <summary>
            Gets a value that indicates if the ListBox/ListView allows multi selection or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicList.SelectedItems">
            <summary>
            Gets the selected ListViewItems\ListBoxItems.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicList.Items">
            <summary>
            Gets all available ListViewItems\ListBoxItems. In WPF by default list items gets created first as soon they became visible.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicList.HorizontalScrollPercent">
            <summary>
            Gets the current vertical scroll position; -1 if nothing has to scroll.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicList.HorizontalViewSize">
            <summary>
            Gets the current horizontal view size in percent.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicList.HorizontallyScrollable">
            <summary>
            Gets a valuie that indicates if the ListBox/ListView can scroll horizontally.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicList.VerticalScrollPercent">
            <summary>
            Gets the current vertical scroll position; -1 if nothing has to scroll.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicList.VerticalViewSize">
            <summary>
            Gets the current vertical view size in percent.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicList.VerticallyScrollable">
            <summary>
            Gets a value that indicates if the ListBox\ListView can scroll vertically.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicList.ColumnCount">
            <summary>
            Gets the amount of columns.
            </summary>
            <remarks>Not supported for a ListBox.</remarks>
            <exception cref="T:System.NotSupportedException">The element does not support ColumnCount.</exception>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicList.RowCount">
            <summary>
            Gets the amount of rows.
            </summary>
            <remarks>Not supported for a ListBox.</remarks>
            <exception cref="T:System.NotSupportedException">The element does not support RowCount.</exception>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicList.UnsafeMethods">
            <summary>
            Contains unsafe methods for interact with the control directly.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicList.UnsafeMethods.Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)">
            <summary>
            Scrolls inside the visible range; Small is just like arrow up/down; Large is like page up/down.
            </summary>
            <param name="horizontalAmount">The amount of characters to scroll.</param>
            <param name="verticalAmount">The amount of lines to scroll.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicList.UnsafeMethods.ScrollHorizontal(System.Windows.Automation.ScrollAmount)">
            <summary>
            Scrolls inside the visible range horizontal; Small is just like arrow up/down; Large is like page up/down.
            </summary>
            <param name="amount">The amount of characters to scroll.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicList.UnsafeMethods.ScrollVertical(System.Windows.Automation.ScrollAmount)">
            <summary>
            Scrolls inside the visible range vertical; Small is just like arrow up/down; Large is like page up/down.
            </summary>
            <param name="amount">The amount of lines to scroll.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicList.UnsafeMethods.SetScrollPercent(System.Double,System.Double)">
            <summary>
            Sets the horizontal and vertical scroll position in percent.
            </summary>
            <param name="horizontalPercent">The horizontal percentual value to set.</param>
            <param name="verticalPercent">The vertical percentual value to set.</param>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicListItem">
            <summary>
            Represents a ListBoxItem or ListViewItem.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicListItem.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicListItem"/> class
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicListItem.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicListItem.Unsafe">
            <summary>
            Gets access to unsafe methods.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicListItem.IsSelected">
            <summary>
            Gets a value that indicates if the ListBoxItem/ListViewItem is selected or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicListItem.Text">
            <summary>
            Gets the written text in the ListBoxItem/ListViewItem.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicListItem.UnsafeMethods">
            <summary>
            Contains unsafe methods for interact with the control directly.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicListItem.UnsafeMethods.AddToSelection">
            <summary>
            Adds the ListBoxItem/ListViewItem to the list of selected ListBoxItems/ListViewItems.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicListItem.UnsafeMethods.RemoveFromSelection">
            <summary>
            Removes the ListBoxItem/ListViewItem from the list of the selected ListBoxItems/ListViewItems.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicListItem.UnsafeMethods.Select">
            <summary>
            Deselects all other ListBoxItems/ListViewItems if any and selects the current ListBoxItem/ListViewItem.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicListItem.UnsafeMethods.ScrollIntoView">
            <summary>
            Scrolls to the ListBoxItem/ListViewItem.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicMenu">
            <summary>
            Represents a Menu or ContextMenu
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicMenu.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicMenu"/> class
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicMenu.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicMenu.Items">
            <summary>
            Gets all available MenuItems.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicMenuItem">
            <summary>
            Represents a MenuItem.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicMenuItem.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicMenuItem"/> class
            </summary>
            <param name="automationElement">The automation control</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicMenuItem.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicMenuItem.Unsafe">
            <summary>
            Gets access to unsafe methods.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicMenuItem.IsExpanded">
            <summary>
            Gets a value that indicates if the MenuItem is expanded or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicMenuItem.Items">
            <summary>
            Gets all available MenuItems. In WPF normally the child items gets created first when they became visible.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicMenuItem.Text">
            <summary>
            Gets the text written in the MenuItem.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicMenuItem.UnsafeMethods">
            <summary>
            Contains unsafe methods for interact with the control directly.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicMenuItem.UnsafeMethods.Expand">
            <summary>
            Expands the MenuItem.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicMenuItem.UnsafeMethods.Collapse">
            <summary>
            Collapses the MenuItem.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicMessageBox">
            <summary>
            Represents a MessageBox.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicMessageBox.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicMessageBox"/> class.
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicMessageBox.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicMessageBox.Icon">
            <summary>
            The icon shown in the MessageBox if any; otherwise an exception is thrown.
            </summary>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">The MessageBox does not contain an icon.</exception>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicMessageBox.Text">
            <summary>
            Gets the text shown in the MessageBox if any; otherwise an empty string.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicMessageBox.OKButton">
            <summary>
            Gets the OK Button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicMessageBox.CancelButton">
            <summary>
            Gets the Cancel Button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicMessageBox.AbortButton">
            <summary>
            Gets the Abort Button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicMessageBox.RetryButton">
            <summary>
            Gets the Retry Button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicMessageBox.IgnoreButton">
            <summary>
            Gets the Ignore Button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicMessageBox.YesButton">
            <summary>
            Gets the Yes Button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicMessageBox.NoButton">
            <summary>
            Gets the No Button.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicOpenFileDialog">
            <summary>
            Represents the OpenFileDialog.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicOpenFileDialog.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicOpenFileDialog"/> class.
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicOpenFileDialog.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicOpenFileDialog.InputComboBox">
            <summary>
            Gets the ComboBox to write the file name(s) in.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicOpenFileDialog.BreadCrumbBar">
            <summary>
            Gets the upper BreadCrumbBar.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicOpenFileDialog.BreadCrumbTextBox">
            <summary>
            Gets the text box in the upper BreadCrumbBar to write a location in.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicOpenFileDialog.FilterComboBox">
            <summary>
            Gets the Filters ComboBox.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicOpenFileDialog.CancelButton">
            <summary>
            Gets the Cancel button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicOpenFileDialog.OpenButton">
            <summary>
            Gets the Open button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicOpenFileDialog.FilesList">
            <summary>
            Gets the list with the files in the current folder.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicOpenFileDialog.SearchTextBox">
            <summary>
            Gets the text box for searching.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicOpenFileDialog.SearchButton">
            <summary>
            Gets the button to start or cancel search.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicOpenFileDialog.FolderTree">
            <summary>
            Gets the tree with the available folders.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicOpenFileDialog.ToolBar">
            <summary>
            Gets the ToolBar.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicOpenFileDialog.ChangeViewButton">
            <summary>
            Gets the button to change the current view style.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicOpenFileDialog.ShowPreviewButton">
            <summary>
            Gets the button to show or hide the current preview pane.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicOpenFileDialog.HelpButton">
            <summary>
            Gets the button for show the help.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicRadioButton">
            <summary>
            Represents a RadioButton.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicRadioButton.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicRadioButton"/> class.
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicRadioButton.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicRadioButton.Unsafe">
            <summary>
            Gets access to unsafe methods.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicRadioButton.IsChecked">
            <summary>
            Gets a value that indicates if the RadioButton is checked or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicRadioButton.Text">
            <summary>
            Gets the text written in the RadioButton.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicRadioButton.UnsafeMethods">
            <summary>
            Contains unsafe methods for interact with the control directly.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicRadioButton.UnsafeMethods.Check">
            <summary>
            Checks the RadioButton. All other items in the group became unchecked automatically.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicSaveFileDialog">
            <summary>
            Represents the SaveFileDialog.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicSaveFileDialog.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicSaveFileDialog"/> class.
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicSaveFileDialog.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicSaveFileDialog.SearchTextBox">
            <summary>
            Gets the text box for searching.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicSaveFileDialog.SearchButton">
            <summary>
            Gets the button to start or cancel search.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicSaveFileDialog.BreadCrumbBar">
            <summary>
            Gets the upper BreadCrumbBar.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicSaveFileDialog.BreadCrumbTextBox">
            <summary>
            Gets the text box in the upper BreadCrumbBar to write a location in.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicSaveFileDialog.FolderTree">
            <summary>
            Gets the tree with the available folders.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicSaveFileDialog.InputTextBox">
            <summary>
            Gets the text box to write the file name(s) in.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicSaveFileDialog.FilterComboBox">
            <summary>
            Gets the Filters ComboBox.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicSaveFileDialog.SaveButton">
            <summary>
            Gets the Save button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicSaveFileDialog.CancelButton">
            <summary>
            Gets the Cancel button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicSaveFileDialog.FilesList">
            <summary>
            Gets the list with the files in the current folder.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicSaveFileDialog.ToolBar">
            <summary>
            Gets the ToolBar.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicSaveFileDialog.ChangeViewButton">
            <summary>
            Gets the button to change the current view style.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicSaveFileDialog.HelpButton">
            <summary>
            Gets the button for show the help.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicTabControl">
            <summary>
            Represents a TabControl.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicTabControl.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicTabControl"/> class
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicTabControl.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicTabControl.SelectedItem">
            <summary>
            Gets the selected tab item if any; otherwise null.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicTabControl.Items">
            <summary>
            Gets all available tab items.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicTabItem">
            <summary>
            Represents a TabItem.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicTabItem.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicTabItem"/> class
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicTabItem.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicTabItem.Unsafe">
            <summary>
            Gets access to unsafe methods.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicTabItem.IsSelected">
            <summary>
            Gets a value that indicates if it is selected or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicTabItem.Text">
            <summary>
            Gets the text written in the tab item.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicTabItem.UnsafeMethods">
            <summary>
            Contains unsafe methods for interact with the control directly.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicTabItem.UnsafeMethods.Select">
            <summary>
            Selects the item.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicText">
            <summary>
            Represents a TextBlock or Label.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicText.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicText"/> class.
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicText.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicText.Text">
            <summary>
            Gets the text written in the TextBlock/Label.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicToggleButton">
            <summary>
            Represents a ToggleButton.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicToggleButton.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicToggleButton"/> class.
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicToggleButton.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicToggleButton.Unsafe">
            <summary>
            Gets access to unsafe methods.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicToggleButton.IsChecked">
            <summary>
            Gets a value that indicates if the ToggleButton is checked or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicToggleButton.Text">
            <summary>
            Gets the text written in the ToggleButton.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicToggleButton.UnsafeMethods">
            <summary>
            Contains unsafe methods for interact with the control directly.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicToggleButton.UnsafeMethods.Toggle">
            <summary>
            Changes the IsChecked state.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicTreeView">
            <summary>
            Represents a TreeView.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicTreeView.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicTreeView"/> class.
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicTreeView.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicTreeView.Unsafe">
            <summary>
            Gets access to unsafe methods.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicTreeView.Items">
            <summary>
            Gets all available child TreeViewItems. In WPF normally all child items get created first as soon they became visible.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicTreeView.HorizontalScrollPercent">
            <summary>
            Gets the current vertical scroll position; -1 if nothing has to scroll.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicTreeView.HorizontalViewSize">
            <summary>
            Gets the current horizontal view size in percent.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicTreeView.HorizontallyScrollable">
            <summary>
            Gets if the TreeView can scroll horizontally.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicTreeView.VerticalScrollPercent">
            <summary>
            Gets the current vertical scroll position; -1 if nothing has to scroll. 
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicTreeView.VerticalViewSize">
            <summary>
            Gets the current vertical view size in percent.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicTreeView.VerticallyScrollable">
            <summary>
            Gets if the TreeView can scroll vertically
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicTreeView.UnsafeMethods">
            <summary>
            Contains unsafe methods for interact with the control directly.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicTreeView.UnsafeMethods.Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)">
            <summary>
            Scrolls inside the visible range; Small is just like arrow up/down; Large is like page up/down.
            </summary>
            <param name="horizontalAmount">The amount of characters to scroll.</param>
            <param name="verticalAmount">The amount of lines to scroll.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicTreeView.UnsafeMethods.ScrollHorizontal(System.Windows.Automation.ScrollAmount)">
            <summary>
            Scrolls inside the visible range horizontal; Small is just like arrow up/down; Large is like page up/down.
            </summary>
            <param name="amount">The amount of characters to scroll.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicTreeView.UnsafeMethods.ScrollVertical(System.Windows.Automation.ScrollAmount)">
            <summary>
            Scrolls inside the visible range vertical; Small is just like arrow up/down; Large is like page up/down.
            </summary>
            <param name="amount">The amount of lines to scroll.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicTreeView.UnsafeMethods.SetScrollPercent(System.Double,System.Double)">
            <summary>
            Sets the horizontal and vertical scroll position.
            </summary>
            <param name="horizontalPercent">The horizontal percentual value to set.</param>
            <param name="verticalPercent">The vertical percentual value to set.</param>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicTreeViewItem">
            <summary>
            Represents a TreeViewItem.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicTreeViewItem.#ctor(System.Windows.Automation.AutomationElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.BasicElements.BasicTreeViewItem"/> class.
            </summary>
            <param name="automationElement">The automation control.</param>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicTreeViewItem.GetDataCopy">
            <summary>
            Make a shadow copy of the element at the current state which stays available even the element is gone.
            </summary>
            <returns>A shadow copy of the current element.</returns>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicTreeViewItem.Unsafe">
            <summary>
            Gets access to unsafe methods.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicTreeViewItem.IsSelected">
            <summary>
            Gets a value that indicates if it is selected or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicTreeViewItem.IsExpanded">
            <summary>
            Gets a value that indicates if it is expanded or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicTreeViewItem.Items">
            <summary>
            Gets all available child tree items. In WPF normally all child items get created first as soon they became visible.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.BasicTreeViewItem.Text">
            <summary>
            Gets the text written in the TreeViewItem.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.BasicTreeViewItem.UnsafeMethods">
            <summary>
            Contains unsafe methods for interact with the control directly.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicTreeViewItem.UnsafeMethods.Expand">
            <summary>
            Expands the item.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicTreeViewItem.UnsafeMethods.Collapse">
            <summary>
            Collapses the item.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicTreeViewItem.UnsafeMethods.Select">
            <summary>
            Selects the item.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicTreeViewItem.UnsafeMethods.Deselect">
            <summary>
            Deselects the item.
            </summary>
        </member>
        <member name="M:DW.CodedUI.BasicElements.BasicTreeViewItem.UnsafeMethods.ScrollIntoView">
            <summary>
            Scrolls the parent TreeView to the item.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicBrowseFolderDialogData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicBrowseFolderDialog"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicBrowseFolderDialog.GetDataCopy"/>.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicElementData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicElement"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicElement.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicElementData.AutomationId">
            <summary>
            Gets the automation ID.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicElementData.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicElementData.BoundingRectangle">
            <summary>
            Gets the position and size.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicElementData.ClassName">
            <summary>
            Gets the class name.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicElementData.NativeWindowHandle">
            <summary>
            Gets the window handle if any; otherwise 0.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicElementData.ProcessId">
            <summary>
            Gets the process ID which the elements belongs to.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicElementData.Children">
            <summary>
            Gets the child elements of the current element. This will be filled by use the <see cref="M:DW.CodedUI.UI.GetFullUITreeData(DW.CodedUI.BasicElements.BasicElement)"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicElementData.IsEnabled">
            <summary>
            Gets a value that indicates if the element is enabled or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicElementData.IsVisible">
            <summary>
            Gets a value that indicates if the element is visible or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicBrowseFolderDialogData.DescriptionText">
            <summary>
            Gets the descripton text.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicBrowseFolderDialogData.NewFolderButton">
            <summary>
            Gets the new folder button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicBrowseFolderDialogData.OKButton">
            <summary>
            Gets the OK button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicBrowseFolderDialogData.CancelButton">
            <summary>
            Gets the Cancel button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicBrowseFolderDialogData.FolderTree">
            <summary>
            Gets the tree for selecting a folder.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicButtonData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicButton"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicButton.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicButtonData.Text">
            <summary>
            Gets the text written in the Button.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicCheckBoxData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicCheckBox"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicCheckBox.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicCheckBoxData.IsChecked">
            <summary>
            Gets a value that indicates if the CheckBox is checked.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicCheckBoxData.Text">
            <summary>
            Gets the text written in the CheckBox.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicColorPickerDialogData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicColorPickerDialog"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicColorPickerDialog.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicColorPickerDialogData.ColorsSection">
            <summary>
            Gets the section where all square colors are selectable.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicColorPickerDialogData.DefineColorsButton">
            <summary>
            Gets the button to expand the section where custom colors can be defined.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicColorPickerDialogData.ColorPickSection">
            <summary>
            Gets the section where the user can pick the color out of gradients.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicColorPickerDialogData.ColorGradientSection">
            <summary>
            Gets the section where the user can chose the color brightness with s kind of slider.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicColorPickerDialogData.ColorDisplaySection">
            <summary>
            Gets the secion where the current user color is shown.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicColorPickerDialogData.ColorShadeTextBox">
            <summary>
            Gets the text box where the color shade value is written in.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicColorPickerDialogData.ColorChromaTextBox">
            <summary>
            Gets the text box where the color chroma value is written in.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicColorPickerDialogData.ColorBrightnessTextBox">
            <summary>
            Gets the text box where the color brightness value is written in.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicColorPickerDialogData.RedTextBox">
            <summary>
            Gets the text box where the red color value is written in.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicColorPickerDialogData.GreenTextBox">
            <summary>
            Gets the text box where the green color value is written in.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicColorPickerDialogData.BlueTextBox">
            <summary>
            Gets the text box where the blue color value is written in.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicColorPickerDialogData.ApplyColorButton">
            <summary>
            Gets the button to apply custom colors.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicColorPickerDialogData.OKButton">
            <summary>
            Gets the OK button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicColorPickerDialogData.CancelButton">
            <summary>
            Gets the Cancel button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicColorPickerDialogData.HelpButton">
            <summary>
            Gets the help button.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicComboBoxData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicComboBox"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicComboBox.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicComboBoxData.SelectedItem">
            <summary>
            Gets the selected item if any; otherwise null.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicComboBoxData.Items">
            <summary>
            Gets all created items. In WPF child elements gets created first if the ComboBox has been opened once.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicComboBoxData.Text">
            <summary>
            Gets the text from the selected child if set; otherwise the written text.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicComboBoxData.IsReadOnly">
            <summary>
            Gets a value that indicates if the ComboBox is readonly or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicComboBoxData.IsExpanded">
            <summary>
            Gets a value that indicates if the ComboBox is expanded or not.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicComboBoxItemData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicComboBoxItem"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicComboBoxItem.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicComboBoxItemData.IsSelected">
            <summary>
            Gets a value that indicates if the ComboBoxItem is selected or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicComboBoxItemData.Text">
            <summary>
            Gets the text written in the ComboBoxItem.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicEditData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicEdit"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicEdit.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicEditData.Text">
            <summary>
            Gets the written text in the [Rich]TextBox.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicEditData.IsReadOnly">
            <summary>
            Gets a value that indicates if the [Rich]TextBox is read only or not.
            </summary>
            <remarks>Not supported for a RichTextBox.</remarks>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicExpanderData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicExpander"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicExpander.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicExpanderData.IsExpanded">
            <summary>
            Gets a value that indicates if the Expander it is expanded or not.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicFontPickerDialogData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicFontPickerDialog"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicFontPickerDialog.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicFontPickerDialogData.FontNameSection">
            <summary>
            Gets the section for selecting the font name.
            </summary>
            <remarks>This is an different displayed ComboBox.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicFontPickerDialogData.FontNameTextBox">
            <summary>
            Gets the text box where the font name is written in.
            </summary>
            <remarks>This is the text box of a writable ComboBox.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicFontPickerDialogData.FontNameList">
            <summary>
            Gets the list of available font names.
            </summary>
            <remarks>This is the open drop down of a ComboBox.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicFontPickerDialogData.FontStyleSection">
            <summary>
            Gets the section for selecting the font style.
            </summary>
            <remarks>This is an different displayed ComboBox.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicFontPickerDialogData.FontStyleTextBox">
            <summary>
            Gets the text box where the font style is written in.
            </summary>
            <remarks>This is the text box of a writable ComboBox.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicFontPickerDialogData.FontStyleList">
            <summary>
            Gets the list of available font styles.
            </summary>
            <remarks>This is the open drop down of a ComboBox.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicFontPickerDialogData.FontSizeSection">
            <summary>
            Gets the section for selecting the font size.
            </summary>
            <remarks>This is an different displayed ComboBox.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicFontPickerDialogData.FontSizeTextBox">
            <summary>
            Gets the text box where the font size is written in.
            </summary>
            <remarks>This is the text box of a writable ComboBox.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicFontPickerDialogData.FontSizeList">
            <summary>
            Gets the list of available font sizes.
            </summary>
            <remarks>This is the open drop down of a ComboBox.</remarks>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicFontPickerDialogData.LineThroughCheckBox">
            <summary>
            Gets the CheckBox which defines if the font has to be line through.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicFontPickerDialogData.UnderlineCheckBox">
            <summary>
            Gets the CheckBox which defines if the font has to be underlined.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicFontPickerDialogData.FontColorComboBox">
            <summary>
            Gets the ComboBox to select the font color.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicFontPickerDialogData.ScriptComboBox">
            <summary>
            Gets the ComboBox to select the font script value.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicFontPickerDialogData.OKButton">
            <summary>
            Gets the OK button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicFontPickerDialogData.CancelButton">
            <summary>
            Gets the Cancel button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicFontPickerDialogData.ApplyButton">
            <summary>
            Gets the Apply button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicFontPickerDialogData.HelpButton">
            <summary>
            Gets the Help button.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicListData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicList"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicList.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicListData.CanMultiSelect">
            <summary>
            Gets a value that indicates if the ListBox/ListView allows multi selection or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicListData.SelectedItems">
            <summary>
            Gets the selected ListViewItems\ListBoxItems.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicListData.Items">
            <summary>
            Gets all available ListViewItems\ListBoxItems. In WPF by default list items gets created first as soon they became visible.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicListData.ColumnCount">
            <summary>
            Gets the amount of columns.
            </summary>
            <remarks>Not supported for a ListBox.</remarks>
            <exception cref="T:System.NotSupportedException">The element does not support ColumnCount.</exception>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicListData.RowCount">
            <summary>
            Gets the amount of rows.
            </summary>
            <remarks>Not supported for a ListBox.</remarks>
            <exception cref="T:System.NotSupportedException">The element does not support RowCount.</exception>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicListItemData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicListItem"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicListItem.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicListItemData.IsSelected">
            <summary>
            Gets a value that indicates if the ListBoxItem/ListViewItem is selected or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicListItemData.Text">
            <summary>
            Gets the written text in the ListBoxItem/ListViewItem.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicMenuData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicMenu"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicMenu.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicMenuData.Items">
            <summary>
            Gets all available MenuItems.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicMenuItemData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicMenuItem"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicMenuItem.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicMenuItemData.IsExpanded">
            <summary>
            Gets a value that indicates if the MenuItem is expanded or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicMenuItemData.Items">
            <summary>
            Gets all available MenuItems. In WPF normally the child items gets created first when they became visible.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicMenuItemData.Text">
            <summary>
            Gets the text written in the MenuItem.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicMessageBoxData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicMessageBox"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicMessageBox.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicMessageBoxData.Icon">
            <summary>
            The icon shown in the MessageBox if any; otherwise an exception is thrown.
            </summary>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">The MessageBox does not contain an icon.</exception>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicMessageBoxData.Text">
            <summary>
            Gets the text shown in the MessageBox if any; otherwise an empty string.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicMessageBoxData.OKButton">
            <summary>
            Gets the OK Button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicMessageBoxData.CancelButton">
            <summary>
            Gets the Cancel Button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicMessageBoxData.AbortButton">
            <summary>
            Gets the Abort Button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicMessageBoxData.RetryButton">
            <summary>
            Gets the Retry Button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicMessageBoxData.IgnoreButton">
            <summary>
            Gets the Ignore Button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicMessageBoxData.YesButton">
            <summary>
            Gets the Yes Button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicMessageBoxData.NoButton">
            <summary>
            Gets the No Button.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicOpenFileDialogData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicOpenFileDialog"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicOpenFileDialog.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicOpenFileDialogData.InputComboBox">
            <summary>
            Gets the ComboBox to write the file name(s) in.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicOpenFileDialogData.BreadCrumbBar">
            <summary>
            Gets the upper BreadCrumbBar.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicOpenFileDialogData.BreadCrumbTextBox">
            <summary>
            Gets the text box in the upper BreadCrumbBar to write a location in.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicOpenFileDialogData.FilterComboBox">
            <summary>
            Gets the Filters ComboBox.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicOpenFileDialogData.CancelButton">
            <summary>
            Gets the Cancel button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicOpenFileDialogData.OpenButton">
            <summary>
            Gets the Open button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicOpenFileDialogData.FilesList">
            <summary>
            Gets the list with the files in the current folder.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicOpenFileDialogData.SearchTextBox">
            <summary>
            Gets the text box for searching.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicOpenFileDialogData.SearchButton">
            <summary>
            Gets the button to start or cancel search.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicOpenFileDialogData.FolderTree">
            <summary>
            Gets the tree with the available folders.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicOpenFileDialogData.ToolBar">
            <summary>
            Gets the ToolBar.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicOpenFileDialogData.ChangeViewButton">
            <summary>
            Gets the button to change the current view style.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicOpenFileDialogData.ShowPreviewButton">
            <summary>
            Gets the button to show or hide the current preview pane.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicOpenFileDialogData.HelpButton">
            <summary>
            Gets the button for show the help.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicRadioButtonData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicRadioButton"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicRadioButton.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicRadioButtonData.IsChecked">
            <summary>
            Gets a value that indicates if the RadioButton is checked or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicRadioButtonData.Text">
            <summary>
            Gets the text written in the RadioButton.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicSaveFileDialogData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicSaveFileDialog"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicSaveFileDialog.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicSaveFileDialogData.SearchTextBox">
            <summary>
            Gets the text box for searching.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicSaveFileDialogData.SearchButton">
            <summary>
            Gets the button to start or cancel search.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicSaveFileDialogData.BreadCrumbBar">
            <summary>
            Gets the upper BreadCrumbBar.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicSaveFileDialogData.BreadCrumbTextBox">
            <summary>
            Gets the text box in the upper BreadCrumbBar to write a location in.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicSaveFileDialogData.FolderTree">
            <summary>
            Gets the tree with the available folders.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicSaveFileDialogData.InputTextBox">
            <summary>
            Gets the text box to write the file name(s) in.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicSaveFileDialogData.FilterComboBox">
            <summary>
            Gets the Filters ComboBox.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicSaveFileDialogData.SaveButton">
            <summary>
            Gets the Save button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicSaveFileDialogData.CancelButton">
            <summary>
            Gets the Cancel button.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicSaveFileDialogData.FilesList">
            <summary>
            Gets the list with the files in the current folder.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicSaveFileDialogData.ToolBar">
            <summary>
            Gets the ToolBar.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicSaveFileDialogData.ChangeViewButton">
            <summary>
            Gets the button to change the current view style.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicSaveFileDialogData.HelpButton">
            <summary>
            Gets the button for show the help.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicTabControlData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicTabControl"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicTabControl.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicTabControlData.SelectedItem">
            <summary>
            Gets the selected tab item if any; otherwise null.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicTabControlData.Items">
            <summary>
            Gets all available tab items.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicTabItemData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicTabItem"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicTabItem.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicTabItemData.IsSelected">
            <summary>
            Gets a value that indicates if it is selected or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicTabItemData.Text">
            <summary>
            Gets the text written in the tab item.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicTextData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicText"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicText.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicTextData.Text">
            <summary>
            Gets the text written in the TextBlock/Label.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicToggleButtonData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicToggleButton"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicToggleButton.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicToggleButtonData.IsChecked">
            <summary>
            Gets a value that indicates if the ToggleButton is checked or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicToggleButtonData.Text">
            <summary>
            Gets the text written in the ToggleButton.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicTreeViewData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicTreeView"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicTreeView.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicTreeViewData.Items">
            <summary>
            Gets all available child TreeViewItems. In WPF normally all child items get created first as soon they became visible.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicTreeViewItemData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicTreeViewItem"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicTreeViewItem.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicTreeViewItemData.IsSelected">
            <summary>
            Gets a value that indicates if it is selected or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicTreeViewItemData.IsExpanded">
            <summary>
            Gets a value that indicates if it is expanded or not.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicTreeViewItemData.Items">
            <summary>
            Gets all available child tree items. In WPF normally all child items get created first as soon they became visible.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicTreeViewItemData.Text">
            <summary>
            Gets the text written in the TreeViewItem.
            </summary>
        </member>
        <member name="T:DW.CodedUI.BasicElements.Data.BasicWindowData">
            <summary>
            Represents the data of a <see cref="T:DW.CodedUI.BasicElements.BasicWindow"/> at the time of the call <see cref="M:DW.CodedUI.BasicElements.BasicWindow.GetDataCopy"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.BasicElements.Data.BasicWindowData.Title">
            <summary>
            Gets the title of the window.
            </summary>
        </member>
        <member name="T:DW.CodedUI.By">
            <summary>
            Defines all possibile conditions to be used by searching for UI elements. See <see cref="T:DW.CodedUI.UI"/>.
            </summary>
        </member>
        <member name="M:DW.CodedUI.By.AutomationId(System.String)">
            <summary>
            Starts the search for the UI element by the automation ID. By default CompareKind.Exact will be used.
            </summary>
            <param name="automationId">The automation ID to search for.</param>
            <returns>A combinable By to be able to append additional conditions.</returns>
            <exception cref="T:System.ArgumentException">automationId is null, empty or just whitespaces.</exception>
        </member>
        <member name="M:DW.CodedUI.By.AutomationId(System.String,DW.CodedUI.CompareKind)">
            <summary>
            Starts the search for the UI element by the automation ID.
            </summary>
            <param name="automationId">The automation ID to search for.</param>
            <param name="comparison">The comparison kind how the automation ID will be compared.</param>
            <returns>A combinable By to be able to append additional conditions.</returns>
            <exception cref="T:System.ArgumentException">automationId is null, empty or just whitespaces.</exception>
        </member>
        <member name="M:DW.CodedUI.By.Name(System.String)">
            <summary>
            Starts the search for the UI element by the name. By default CompareKind.Exact will be used.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>A combinable By to be able to append additional conditions.</returns>
            <exception cref="T:System.ArgumentException">name is null, empty or just whitespaces.</exception>
        </member>
        <member name="M:DW.CodedUI.By.Name(System.String,DW.CodedUI.CompareKind)">
            <summary>
            Starts the search for the UI element by the name.
            </summary>
            <param name="name">The name to search for.</param>
            <param name="comparison">The comparison kind how the name will be compared.</param>
            <returns>A combinable By to be able to append additional conditions.</returns>
            <exception cref="T:System.ArgumentException">name is null, empty or just whitespaces.</exception>
        </member>
        <member name="M:DW.CodedUI.By.ClassName(System.String)">
            <summary>
            Starts the search for the UI element by the name. By default CompareKind.Exact will be used.
            </summary>
            <param name="className">The class name to search for.</param>
            <returns>A combinable By to be able to append additional conditions.</returns>
            <exception cref="T:System.ArgumentException">className is null, empty or just whitespaces.</exception>
        </member>
        <member name="M:DW.CodedUI.By.ClassName(System.String,DW.CodedUI.CompareKind)">
            <summary>
            Starts the search for the UI element by the name.
            </summary>
            <param name="className">The class name to search for.</param>
            <param name="comparison">The comparison kind how the class name will be compared.</param>
            <returns>A combinable By to be able to append additional conditions.</returns>
            <exception cref="T:System.ArgumentException">className is null, empty or just whitespaces.</exception>
        </member>
        <member name="M:DW.CodedUI.By.Focus">
            <summary>
            Starts the search for the UI element which has the keyboard focus.
            </summary>
            <returns>A combinable By to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.By.Condition(System.Predicate{DW.CodedUI.BasicElements.BasicElement})">
            <summary>
            Starts the search for the UI element by a custom condition.
            </summary>
            <param name="condition">The condition to be called for each item to find a matching UI element.</param>
            <returns>A combinable By to be able to append additional conditions.</returns>
            <exception cref="T:System.ArgumentNullException">className is null.</exception>
        </member>
        <member name="T:DW.CodedUI.CodedUIEnvironment">
            <summary>
            Holds global settings to be used at runtime of the DW.CodedUI.
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.SleepSettings">
            <summary>
            Holds global settings to be used at runtime in the <see cref="T:DW.CodedUI.Utilities.DynamicSleep"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.DefaultSettings">
            <summary>
            Holds the global default settings to be used at runtime in the <see cref="T:DW.CodedUI.UI"/> or <see cref="T:DW.CodedUI.WindowFinder"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.ListenerSettings">
            <summary>
            Holds the global settings to be used in the <see cref="T:DW.CodedUI.Utilities.ElementListener"/> and <see cref="T:DW.CodedUI.Utilities.WindowListener"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.LoggerSettings">
            <summary>
            Holds the settings of the activity logs. See <see cref="T:DW.CodedUI.Utilities.LogWriter"/>.
            </summary>
        </member>
        <member name="T:DW.CodedUI.CodedUIEnvironment.SleepSettingsHolder">
            <summary>
            Contains global time settings to be used at runtime in the <see cref="T:DW.CodedUI.Utilities.DynamicSleep"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.SleepSettingsHolder.Default">
            <summary>
            Gets or sets the  default time to be used in the <see cref="M:DW.CodedUI.Utilities.DynamicSleep.Wait"/>. The default value is <see cref="F:DW.CodedUI.Utilities.Time.Medium"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.SleepSettingsHolder.VeryShort">
            <summary>
            Gets or sets the very short time to be used in the <see cref="M:DW.CodedUI.Utilities.DynamicSleep.Wait(DW.CodedUI.Utilities.Time)"/>. The default value is 500 milliseconds.
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.SleepSettingsHolder.Short">
            <summary>
            Gets or sets the short time to be used in the <see cref="M:DW.CodedUI.Utilities.DynamicSleep.Wait(DW.CodedUI.Utilities.Time)"/>. The default value is 1000 milliseconds.
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.SleepSettingsHolder.Medium">
            <summary>
            Gets or sets the medium time to be used in the <see cref="M:DW.CodedUI.Utilities.DynamicSleep.Wait(DW.CodedUI.Utilities.Time)"/>. The default value is 1500 milliseconds.
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.SleepSettingsHolder.Long">
            <summary>
            Gets or sets the long time to be used in the <see cref="M:DW.CodedUI.Utilities.DynamicSleep.Wait(DW.CodedUI.Utilities.Time)"/>. The default value is 2000 milliseconds.
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.SleepSettingsHolder.VeryLong">
            <summary>
            Gets or sets the very long time to be used in the <see cref="M:DW.CodedUI.Utilities.DynamicSleep.Wait(DW.CodedUI.Utilities.Time)"/>. The default value is 2500 milliseconds.
            </summary>
        </member>
        <member name="T:DW.CodedUI.CodedUIEnvironment.DefaultSettingsHolder">
            <summary>
            Contains global default settings to be used at runtime in the <see cref="T:DW.CodedUI.UI"/> or <see cref="T:DW.CodedUI.WindowFinder"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.DefaultSettingsHolder.TimeoutTime">
            <summary>
            Gets or sets a value that indicates the timeout in milliseconds to be used in the <see cref="T:DW.CodedUI.UI"/> or <see cref="T:DW.CodedUI.WindowFinder"/> if Timeout is set to InExclude.With. The default is 10000 milliseconds.
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.DefaultSettingsHolder.IntervalTime">
            <summary>
            Gets or sets a value that indicates the interval in milliseconds to be used in the <see cref="T:DW.CodedUI.UI"/> or <see cref="T:DW.CodedUI.WindowFinder"/> if Interval is set to InExclude.With. The default is 200 milliseconds.
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.DefaultSettingsHolder.Timeout">
            <summary>
            Gets or sets a value that indicates if the <see cref="T:DW.CodedUI.UI"/> or <see cref="T:DW.CodedUI.WindowFinder"/> has a Timeout on default or not. The default is <see cref="F:DW.CodedUI.Utilities.InExclude.With"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.DefaultSettingsHolder.Assert">
            <summary>
            Gets or sets a value that indicates if the default settings of the <see cref="T:DW.CodedUI.UI"/> or <see cref="T:DW.CodedUI.WindowFinder"/> will assert the search result or not. The default is <see cref="F:DW.CodedUI.Utilities.InExclude.With"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.DefaultSettingsHolder.Interval">
            <summary>
            Gets or sets a value that indicates if if the <see cref="T:DW.CodedUI.UI"/> or <see cref="T:DW.CodedUI.WindowFinder"/> has a Intervall on default or not. The default is <see cref="F:DW.CodedUI.Utilities.InExclude.Without"/>.
            </summary>
        </member>
        <member name="T:DW.CodedUI.CodedUIEnvironment.ListenerSettingsHolder">
            <summary>
            Contains global settings to be used in the <see cref="T:DW.CodedUI.Utilities.ElementListener"/> and <see cref="T:DW.CodedUI.Utilities.WindowListener"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.ListenerSettingsHolder.CheckInverval">
            <summary>
            Gets or sets a value that indicates in which intervall the object states will be checked. The default is one second.
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.ListenerSettingsHolder.AsyncEventInvoke">
            <summary>
            Gets or sets a value that indicates of the events in the listeners should be invoked asynchronously or not.
            </summary>
        </member>
        <member name="T:DW.CodedUI.CodedUIEnvironment.LoggerSettingsHolder">
            <summary>
            Contains the settings used for the activity logs. See <see cref="T:DW.CodedUI.Utilities.LogWriter"/>.
            </summary>
        </member>
        <member name="M:DW.CodedUI.CodedUIEnvironment.LoggerSettingsHolder.PrepareInstantWrite(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)">
            <summary>
            Prepares the LogWriter that all actions will be written into a log file directly when happened. A LogWriter.Write is not needed anymore but the execution performance may suffer. 
            (Even with the instant write the LogWriter.Write should be called in the test cleanup anyway to finalize the log file and start time in the log file header.)
            </summary>
            <param name="testContext">The TextContext of the test class.</param>
            <remarks>During the execution the log file has no result on the front no matter of the setting, the log file also have no header, it will finalized by the write on the test cleanup.</remarks>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.LoggerSettingsHolder.IsEnabled">
            <summary>
            Gets or sets a value that indicates if the activity logging is enabled or not. The default is false.
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.LoggerSettingsHolder.LogFilesDirectory">
            <summary>
            Gets or sets the directory where the log files got created. If not changed %temp%\DWCodedUI\[Guid]\ will be used.
            </summary>
            <remarks>When the directoy will be set the IsEnabled will be set to true automatically. Call IsEnabled = False afterwards to deactivate the logging.</remarks>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.LoggerSettingsHolder.LogPassedTestsToo">
            <summary>
            Gets or sets a value that indicates if tests should be loggen also when they passed. The default is false.
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.LoggerSettingsHolder.AddTestResultToFileName">
            <summary>
            Gets or sets a value that indicates if the result file name should start with the result of the test. The default is false.
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.LoggerSettingsHolder.LogLineFormat">
            <summary>
            Gets or sets the format of the log line. The default is "%DateTime% -> %Message%".
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.LoggerSettingsHolder.DateTimeFormat">
            <summary>
            Gets or sets how to write the date and time in the log lines. Default is "HH:mm:ss.fff".
            </summary>
        </member>
        <member name="P:DW.CodedUI.CodedUIEnvironment.LoggerSettingsHolder.ShortLogging">
            <summary>
            Gets or sets a value that indicates of the logging is complete or just short. The default is false.
            </summary>
        </member>
        <member name="T:DW.CodedUI.CombinableAnd">
            <summary>
            Defines all possibile settings to be used by searching for windows. See <see cref="T:DW.CodedUI.WindowFinder"/>.
            </summary>
        </member>
        <member name="M:DW.CodedUI.CombinableAnd.Timeout(System.UInt32)">
            <summary>
            The window should be searched again and again as long this timeout is not elapsed.
            </summary>
            <param name="milliseconds">The timeout in milliseconds.</param>
            <returns>A combinable And to be able to append additional settings.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableAnd.NoTimeout">
            <summary>
            The window should be searched just once.
            </summary>
            <returns>A combinable And to be able to append additional settings.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableAnd.Assert">
            <summary>
            If the window is not found an exception has to be thrown.
            </summary>
            <returns>A combinable And to be able to append additional settings.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableAnd.NoAssert">
            <summary>
            If the window is not found no exception has to be thrown. In this case the Search returns null.
            </summary>
            <returns>A combinable And to be able to append additional settings.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableAnd.InstanceNumber(System.UInt32)">
            <summary>
            If multiple windows got found the N. window get returned.
            </summary>
            <param name="instanceNumber">The instance number N.</param>
            <returns>A combinable And to be able to append additional settings.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableAnd.Interval(System.UInt32)">
            <summary>
            The WindowFinder is searching for windows again and again as soon the timeout is not ellapsed. This defines the wait time beween each search run.
            </summary>
            <param name="milliseconds">The wait time in milliseconds between the searches</param>
            <returns>A combinable And to be able to append additional settings.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableAnd.NoInterval">
            <summary>
            The WindowFinder is searching for windows again and again as soon the timeout is not ellapsed. This defines that there is no wait time between each search run.
            </summary>
            <returns>A combinable And to be able to append additional settings.</returns>
        </member>
        <member name="P:DW.CodedUI.CombinableAnd.And">
            <summary>
            Gets a combinable And to be able to append additional settings.
            </summary>
        </member>
        <member name="T:DW.CodedUI.CombinableBy">
            <summary>
            Defines all possibile conditions to be used by searching for UI elements. See <see cref="T:DW.CodedUI.UI"/>.
            </summary>
        </member>
        <member name="M:DW.CodedUI.CombinableBy.AutomationId(System.String)">
            <summary>
            Starts the search for the UI element by the automation ID. By default CompareKind.Exact will be used.
            </summary>
            <param name="automationId">The automation ID to search for.</param>
            <returns>A combinable By to be able to append additional conditions.</returns>
            <exception cref="T:System.ArgumentException">automationId is null, empty or just whitespaces.</exception>
        </member>
        <member name="M:DW.CodedUI.CombinableBy.AutomationId(System.String,DW.CodedUI.CompareKind)">
            <summary>
            Starts the search for the UI element by the automation ID.
            </summary>
            <param name="automationId">The automation ID to search for.</param>
            <param name="comparison">The comparison kind how the automation ID will be compared.</param>
            <returns>A combinable By to be able to append additional conditions.</returns>
            <exception cref="T:System.ArgumentException">automationId is null, empty or just whitespaces.</exception>
        </member>
        <member name="M:DW.CodedUI.CombinableBy.Name(System.String)">
            <summary>
            Starts the search for the UI element by the name. By default CompareKind.Exact will be used.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>A combinable By to be able to append additional conditions.</returns>
            <exception cref="T:System.ArgumentException">name is null, empty or just whitespaces.</exception>
        </member>
        <member name="M:DW.CodedUI.CombinableBy.Name(System.String,DW.CodedUI.CompareKind)">
            <summary>
            Starts the search for the UI element by the name.
            </summary>
            <param name="name">The name to search for.</param>
            <param name="comparison">The comparison kind how the name will be compared.</param>
            <returns>A combinable By to be able to append additional conditions.</returns>
            <exception cref="T:System.ArgumentException">name is null, empty or just whitespaces.</exception>
        </member>
        <member name="M:DW.CodedUI.CombinableBy.ClassName(System.String)">
            <summary>
            Starts the search for the UI element by the name. By default CompareKind.Exact will be used.
            </summary>
            <param name="className">The class name to search for.</param>
            <returns>A combinable By to be able to append additional conditions.</returns>
            <exception cref="T:System.ArgumentException">className is null, empty or just whitespaces.</exception>
        </member>
        <member name="M:DW.CodedUI.CombinableBy.ClassName(System.String,DW.CodedUI.CompareKind)">
            <summary>
            Starts the search for the UI element by the name.
            </summary>
            <param name="className">The class name to search for.</param>
            <param name="comparison">The comparison kind how the class name will be compared.</param>
            <returns>A combinable By to be able to append additional conditions.</returns>
            <exception cref="T:System.ArgumentException">className is null, empty or just whitespaces.</exception>
        </member>
        <member name="M:DW.CodedUI.CombinableBy.Focus">
            <summary>
            Starts the search for the UI element which has the keyboard focus.
            </summary>
            <returns>A combinable By to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableBy.Condition(System.Predicate{DW.CodedUI.BasicElements.BasicElement})">
            <summary>
            Starts the search for the UI element by a custom condition.
            </summary>
            <param name="condition">The condition to be called for each item to find a matching UI element.</param>
            <returns>A combinable By to be able to append additional conditions.</returns>
            <exception cref="T:System.ArgumentNullException">className is null.</exception>
        </member>
        <member name="P:DW.CodedUI.CombinableBy.And">
            <summary>
            Gets the instance of a combinable By to be able to append additional conditions. By using this all conditions has to match.
            </summary>
            <remarks>If 'And' and 'Or' is in use, all conditions will be combined by the last used.</remarks>
        </member>
        <member name="P:DW.CodedUI.CombinableBy.Or">
            <summary>
            Gets the instance of a combinable By to be able to append additional conditions. By using this just one of the condition has to match.
            </summary>
            <remarks>If 'And' and 'Or' is in use, all conditions will be combined by the last used.</remarks>
        </member>
        <member name="T:DW.CodedUI.CombinableDo">
            <summary>
            Brings possibilities to do additional actions one by one combinable.
            </summary>
        </member>
        <member name="M:DW.CodedUI.CombinableDo.Wait(System.UInt32)">
            <summary>
            Waits the given time.
            </summary>
            <param name="milliseconds">The milliseconds to wait.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableDo.WaitCPUIdle(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Waits that the CPU load became lower than the given minimumPercent.
            </summary>
            <param name="mimimumPercent">The maximum CPU load in percent to be wait for.</param>
            <param name="maximumWaitTime">The timeout how long to wait for the CPU idle.</param>
            <param name="interval">The interval how long to wait for the next CPU load check.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The maximumWaitTime (in milliseconds) cannot be 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">A minimum CPU load of 0 percent is unrealistic. A normal CPU idle is about 1-2%. For a normal run its OK to wait for 25% or lower.</exception>
            <exception cref="T:System.Exception">Cannot meassure the current CPU load.</exception>
        </member>
        <member name="M:DW.CodedUI.CombinableDo.Launch(System.String,System.String)">
            <summary>
            Launches an given executable.
            </summary>
            <param name="path">The Path of the executable. See <see cref="P:System.Diagnostics.ProcessStartInfo.FileName"/>.</param>
            <param name="arguments">The arguments passed to the process. See <see cref="P:System.Diagnostics.ProcessStartInfo.Arguments"/>.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
            <exception cref="T:DW.CodedUI.ExecutableNotAvailableException">path is a not available executable.</exception>
            <exception cref="T:System.Exception">Cannot launch the application.</exception>
        </member>
        <member name="M:DW.CodedUI.CombinableDo.Action(System.Action)">
            <summary>
            Executes the given action.
            </summary>
            <param name="action">The action to execute.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
            <exception cref="T:System.Exception">Cannot invoke the given action.</exception>
        </member>
        <member name="M:DW.CodedUI.CombinableDo.Repeat(System.UInt32)">
            <summary>
            Repeats the previous actions the given times.
            </summary>
            <param name="amount">The amount of repeats.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
            <remarks>The amount is additional to the calls before. That means Do.Action(() =&gt; { }).Repeat(2); will result in 3 action calls.</remarks>
        </member>
        <member name="P:DW.CodedUI.CombinableDo.And">
            <summary>
            Gets a combinable Do to be able to append additional actions.
            </summary>
        </member>
        <member name="T:DW.CodedUI.CombinableUse">
            <summary>
            Defines all possibile conditions to be used by searching for windows. See <see cref="T:DW.CodedUI.WindowFinder"/>.
            </summary>
        </member>
        <member name="T:DW.CodedUI.Use">
            <summary>
            Defines all possibile conditions to be used by searching for windows. See <see cref="T:DW.CodedUI.WindowFinder"/>.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Use.Title(System.String)">
            <summary>
            Starts searching for windows by its title. By default the CompareKind.ContainsIgnoreCase will be use.
            </summary>
            <param name="title">The window title to search for.</param>
            <returns>A combinable Use to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.Use.Title(System.String,DW.CodedUI.CompareKind)">
            <summary>
            Starts searching for windows by its title.
            </summary>
            <param name="title">The window title to search for.</param>
            <param name="comparison">The comparison kind how the window title will be compared.</param>
            <returns>A combinable Use to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.Use.Process(System.String)">
            <summary>
            Starts searching for windows by its process name. By default the CompareKind.ContainsIgnoreCase will be use.
            </summary>
            <param name="name">The process name to search for.</param>
            <returns>A combinable Use to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.Use.Process(System.String,DW.CodedUI.CompareKind)">
            <summary>
            Starts searching for windows by its process name.
            </summary>
            <param name="name">The process name to search for.</param>
            <param name="comparison">The comparison kind how the window title will be compared.</param>
            <returns>A combinable Use to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.Use.AutomationId(System.String)">
            <summary>
            Starts searching for a window by its automation ID. By default CompareKind.Exact will be used.
            </summary>
            <param name="automationId">The automation ID to search for.</param>
            <returns>A combinable Use to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.Use.AutomationId(System.String,DW.CodedUI.CompareKind)">
            <summary>
            Starts searching for a window by its automation ID.
            </summary>
            <param name="automationId">The automation ID to search for.</param>
            <param name="comparison">The comparison kind how the automation ID will be compared.</param>
            <returns>A combinable Use to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.Use.Condition(System.Predicate{DW.CodedUI.BasicElements.BasicWindow})">
            <summary>
            Starts searching for windows by a custom condition.
            </summary>
            <param name="condition">The window condition to be used for compare.</param>
            <returns>A combinable Use to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.Use.ContainingElement(DW.CodedUI.BasicElements.BasicElement)">
            <summary>
            Starts searching for a window which contains the given element.
            </summary>
            <param name="element">The element to start the window search for.</param>
            <returns>A combinable Use to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableUse.Title(System.String)">
            <summary>
            Starts searching for windows by its title. By default the CompareKind.ContainsIgnoreCase will be use.
            </summary>
            <param name="title">The window title to search for.</param>
            <returns>A combinable Use to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableUse.Title(System.String,DW.CodedUI.CompareKind)">
            <summary>
            Starts searching for windows by its title.
            </summary>
            <param name="title">The window title to search for.</param>
            <param name="comparison">The comparison kind how the window title will be compared.</param>
            <returns>A combinable Use to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableUse.Process(System.String)">
            <summary>
            Starts searching for windows by its process name. By default the CompareKind.ContainsIgnoreCase will be use.
            </summary>
            <param name="name">The process name to search for.</param>
            <returns>A combinable Use to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableUse.Process(System.String,DW.CodedUI.CompareKind)">
            <summary>
            Starts searching for windows by its process name.
            </summary>
            <param name="name">The process name to search for.</param>
            <param name="comparison">The comparison kind how the window title will be compared.</param>
            <returns>A combinable Use to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableUse.AutomationId(System.String)">
            <summary>
            Starts searching for a window by its automation ID. By default CompareKind.Exact will be used.
            </summary>
            <param name="automationId">The automation ID to search for.</param>
            <returns>A combinable Use to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableUse.AutomationId(System.String,DW.CodedUI.CompareKind)">
            <summary>
            Starts searching for a window by its automation ID.
            </summary>
            <param name="automationId">The automation ID to search for.</param>
            <param name="comparison">The comparison kind how the automation ID will be compared.</param>
            <returns>A combinable Use to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableUse.Condition(System.Predicate{DW.CodedUI.BasicElements.BasicWindow})">
            <summary>
            Starts searching for windows by a custom condition.
            </summary>
            <param name="condition">The window condition to be used for compare.</param>
            <returns>A combinable Use to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableUse.ContainingElement(DW.CodedUI.BasicElements.BasicElement)">
            <summary>
            Starts searching for a window which contains the given element.
            </summary>
            <param name="element">The element to start the window search for.</param>
            <returns>A combinable Use to be able to append additional conditions.</returns>
        </member>
        <member name="P:DW.CodedUI.CombinableUse.And">
            <summary>
            Gets the instance of a combinable Use to be able to append additional conditions. By using this all conditions has to match.
            </summary>
            <remarks>If 'And' and 'Or' is in use, all conditions will be combined by the last used.</remarks>
        </member>
        <member name="P:DW.CodedUI.CombinableUse.Or">
            <summary>
            Gets the instance of a combinable Use to be able to append additional conditions. By using this just one of the condition has to match.
            </summary>
            <remarks>If 'And' and 'Or' is in use, all conditions will be combined by the last used.</remarks>
        </member>
        <member name="T:DW.CodedUI.CombinableWith">
            <summary>
            Defines all possibile settings to be used by searching for UI elements. See <see cref="T:DW.CodedUI.UI"/>.
            </summary>
        </member>
        <member name="T:DW.CodedUI.With">
            <summary>
            Defines all possibile settings to be used by searching for UI elements. See <see cref="T:DW.CodedUI.UI"/>.
            </summary>
        </member>
        <member name="M:DW.CodedUI.With.Timeout(System.UInt32)">
            <summary>
            The UI element should be searched again and again as long this timeout is not elapsed.
            </summary>
            <param name="milliseconds">The timeout in milliseconds.</param>
            <returns>A combinable With to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.With.NoTimeout">
            <summary>
            The UI element should be searched just once.
            </summary>
            <returns>A combinable With to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.With.Assert">
            <summary>
            If the UI element is not found an exception has to be thrown.
            </summary>
            <returns>A combinable With to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.With.NoAssert">
            <summary>
            If the UI element is not found no exception has to be thrown. In this case the Search returns null.
            </summary>
            <returns>A combinable With to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.With.Interval(System.UInt32)">
            <summary>
            The UI is searching for UI elements again and again as soon the timeout is not ellapsed. This defines the wait time beween each search run.
            </summary>
            <param name="milliseconds">The wait time in milliseconds between the searches</param>
            <returns>A combinable With to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.With.NoInterval">
            <summary>
            The UI is searching for windows again and again as soon the timeout is not ellapsed. This defines that there is no wait time between each search run.
            </summary>
            <returns>A combinable With to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.With.ReadyToUse">
            <summary>
            The UI element has to be visible and enabled.
            </summary>
            <returns>A combinable With to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableWith.Timeout(System.UInt32)">
            <summary>
            The UI element should be searched again and again as long this timeout is not elapsed.
            </summary>
            <param name="milliseconds">The timeout in milliseconds.</param>
            <returns>A combinable With to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableWith.NoTimeout">
            <summary>
            The UI element should be searched just once.
            </summary>
            <returns>A combinable With to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableWith.Assert">
            <summary>
            If the UI element is not found an exception has to be thrown.
            </summary>
            <returns>A combinable With to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableWith.NoAssert">
            <summary>
            If the UI element is not found no exception has to be thrown. In this case the Search returns null.
            </summary>
            <returns>A combinable With to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableWith.Interval(System.UInt32)">
            <summary>
            The UI is searching for UI elements again and again as soon the timeout is not ellapsed. This defines the wait time beween each search run.
            </summary>
            <param name="milliseconds">The wait time in milliseconds between the searches</param>
            <returns>A combinable With to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableWith.NoInterval">
            <summary>
            The UI is searching for windows again and again as soon the timeout is not ellapsed. This defines that there is no wait time between each search run.
            </summary>
            <returns>A combinable With to be able to append additional conditions.</returns>
        </member>
        <member name="M:DW.CodedUI.CombinableWith.ReadyToUse">
            <summary>
            The UI element has to be visible and enabled.
            </summary>
            <returns>A combinable With to be able to append additional conditions.</returns>
        </member>
        <member name="P:DW.CodedUI.CombinableWith.And">
            <summary>
            Gets a combinable With to be able to append additional conditions.
            </summary>
        </member>
        <member name="T:DW.CodedUI.CompareKind">
            <summary>
            Defines how to compare texts.
            </summary>
        </member>
        <member name="F:DW.CodedUI.CompareKind.Exact">
            <summary>
            Compares the string to see if the first is the same like the second.
            </summary>
        </member>
        <member name="F:DW.CodedUI.CompareKind.Contains">
            <summary>
            Compares the string to see if the first contains the second.
            </summary>
        </member>
        <member name="F:DW.CodedUI.CompareKind.StartsWith">
            <summary>
            Compares the string to see if the first starts with the second.
            </summary>
        </member>
        <member name="F:DW.CodedUI.CompareKind.EndsWith">
            <summary>
            Compares the string to see if the first ends with the second.
            </summary>
        </member>
        <member name="F:DW.CodedUI.CompareKind.ExactIgnoreCase">
            <summary>
            Compares the string to match exact with ignoring the casing.
            </summary>
        </member>
        <member name="F:DW.CodedUI.CompareKind.ContainsIgnoreCase">
            <summary>
            Compares the string to see if the first contains the second with ignoring the casing.
            </summary>
        </member>
        <member name="F:DW.CodedUI.CompareKind.StartsWithIgnoreCase">
            <summary>
            Compares the string to see if the first starts with the second with ignoring the casing.
            </summary>
        </member>
        <member name="F:DW.CodedUI.CompareKind.EndsWithIgnoreCase">
            <summary>
            Compares the string to see if the first ends with the second with ignoring the casing.
            </summary>
        </member>
        <member name="T:DW.CodedUI.Do">
            <summary>
            Brings possibilities to do additional actions one by one combinable.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Do.Wait(System.UInt32)">
            <summary>
            Waits the given time.
            </summary>
            <param name="milliseconds">The milliseconds to wait.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.Do.WaitCPUIdle(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Waits that the CPU load became lower than the given minimumPercent.
            </summary>
            <param name="mimimumPercent">The maximum CPU load in percent to be wait for.</param>
            <param name="maximumWaitTime">The timeout how long to wait for the CPU idle.</param>
            <param name="interval">The interval how long to wait for the next CPU load check.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The maximumWaitTime (in milliseconds) cannot be 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">A minimum CPU load of 0 percent is unrealistic. A normal CPU idle is about 1-2%. For a normal run its OK to wait for 25% or lower.</exception>
            <exception cref="T:System.Exception">Cannot meassure the current CPU load.</exception>
        </member>
        <member name="M:DW.CodedUI.Do.Launch(System.String,System.String)">
            <summary>
            Launches an given executable.
            </summary>
            <param name="path">The Path of the executable. See <see cref="P:System.Diagnostics.ProcessStartInfo.FileName"/>.</param>
            <param name="arguments">The arguments passed to the process. See <see cref="P:System.Diagnostics.ProcessStartInfo.Arguments"/>.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
            <exception cref="T:DW.CodedUI.ExecutableNotAvailableException">path is a not available executable.</exception>
            <exception cref="T:System.Exception">Cannot launch the application.</exception>
        </member>
        <member name="M:DW.CodedUI.Do.Action(System.Action)">
            <summary>
            Executes the given action.
            </summary>
            <param name="action">The action to execute.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
            <exception cref="T:System.Exception">Cannot invoke the given action.</exception>
        </member>
        <member name="T:DW.CodedUI.ExecutableNotAvailableException">
            <summary>
            Represents errors that occur during launching an executable.
            </summary>
        </member>
        <member name="T:DW.CodedUI.LoggedException">
            <summary>
            Appends exception lines to the logging system.
            </summary>
        </member>
        <member name="M:DW.CodedUI.LoggedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.LoggedException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:DW.CodedUI.LoggedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.LoggedException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:DW.CodedUI.ExecutableNotAvailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.ExecutableNotAvailableException"/> class.
            </summary>
            <param name="path">The path of the executable to start.</param>
        </member>
        <member name="T:DW.CodedUI.From">
            <summary>
            Defines where the UI element search has to start from. See <see cref="T:DW.CodedUI.UI"/>.
            </summary>
        </member>
        <member name="M:DW.CodedUI.From.Element(DW.CodedUI.BasicElements.BasicElement)">
            <summary>
            The UI element search has to start from a BasicElement.
            </summary>
            <param name="element">The element to start the UI search from.</param>
            <returns>Instance of the From to be used in the <see cref="T:DW.CodedUI.UI"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">element is null.</exception>
        </member>
        <member name="M:DW.CodedUI.From.Desktop">
            <summary>
            The UI element search has to start from the desktop.
            </summary>
            <returns>Instance of the From to be used in the <see cref="T:DW.CodedUI.UI"/> object.</returns>
        </member>
        <member name="M:DW.CodedUI.From.LastWindow">
            <summary>
            The UI element search has to start from the last found window.
            </summary>
            <returns>Instance of the From to be used in the <see cref="T:DW.CodedUI.UI"/> object.</returns>
        </member>
        <member name="M:DW.CodedUI.From.MainWindow">
            <summary>
            The UI element search has to start from the main window of the current application.
            </summary>
            <returns>Instance of the From to be used in the <see cref="T:DW.CodedUI.UI"/> object.</returns>
            <remarks>The current process is determined by the last found window.</remarks>
        </member>
        <member name="T:DW.CodedUI.Is">
            <summary>
            Defines which relation the window have to another window or element. See <see cref="T:DW.CodedUI.WindowFinder"/>.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Is.ChildOf(DW.CodedUI.BasicElements.BasicWindow)">
            <summary>
            The window is a child window of the given window.
            </summary>
            <param name="parentWindow">The parent window of the window to find.</param>
            <returns>Instance of the Is to be used in the <see cref="T:DW.CodedUI.WindowFinder"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">parentWindow is null.</exception>
        </member>
        <member name="M:DW.CodedUI.Is.ParentOf(DW.CodedUI.BasicElements.BasicWindow)">
            <summary>
            The window is the parent window of the given window.
            </summary>
            <param name="childWindow">The child window of the window to find.</param>
            <returns>Instance of the Is to be used in the <see cref="T:DW.CodedUI.WindowFinder"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">childWindow is null.</exception>
        </member>
        <member name="M:DW.CodedUI.Is.OwnerOf(DW.CodedUI.BasicElements.BasicElement)">
            <summary>
            The window is the owner of the given basic element.
            </summary>
            <param name="childElement">The BasicElement contained in the window.</param>
            <returns>Instance of the Is to be used in the <see cref="T:DW.CodedUI.WindowFinder"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">childElement is null.</exception>
        </member>
        <member name="M:DW.CodedUI.Is.MainWindow">
            <summary>
            The window is the main window of the own process.
            </summary>
            <returns>Instance of the Is to be used in the <see cref="T:DW.CodedUI.WindowFinder"/> object.</returns>
        </member>
        <member name="T:DW.CodedUI.Key">
            <summary>
            Represents keys on the keyboard.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.LeftMouseButton">
            <summary>
            The Left mouse button.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.RightMouseButton">
            <summary>
            The Right mouse button.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Cancel">
            <summary>
            The Control-break processing.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.MiddleMouseButton">
            <summary>
            The Middle mouse button (three-button mouse).
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.SpecialMouseButtonX1">
            <summary>
            The X1 mouse button.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.SpecialMouseButtonX2">
            <summary>
            The X2 mouse button.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Backspace">
            <summary>
            The BACKSPACE key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Tab">
            <summary>
            The TAB key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Clear">
            <summary>
            The CLEAR key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Enter">
            <summary>
            The ENTER key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Shift">
            <summary>
            The SHIFT key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Control">
            <summary>
            The CTRL key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Alt">
            <summary>
            The ALT key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Pause">
            <summary>
            The PAUSE key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.CapsLock">
            <summary>
            The CAPS LOCK key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.IME_KANA">
            <summary>
            The IME Kana mode.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.IME_Hanguel">
            <summary>
            The IME Hanguel mode (maintained for compatibility; use VK_HANGUL).
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.IME_Hangul">
            <summary>
            The IME Hangul mode.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.IME_Junja">
            <summary>
            The IME Junja mode.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.IME_Final">
            <summary>
            The IME final mode.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.IME_Hanja">
            <summary>
            The IME Hanja mode.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.IME_Kanji">
            <summary>
            The IME Kanji mode.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Esc">
            <summary>
            The ESC key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.IME_Convert">
            <summary>
            The IME convert.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.IME_NonConvert">
            <summary>
            The IME nonconvert.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.IME_Accept">
            <summary>
            The IME accept.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.IME_ModeChangeRequest">
            <summary>
            The IME mode change request.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Space">
            <summary>
            The SPACEBAR.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.PageUp">
            <summary>
            The PAGE UP key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.PageDown">
            <summary>
            The PAGE DOWN key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.End">
            <summary>
            The END key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Pos1">
            <summary>
            The HOME key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Left">
            <summary>
            The LEFT ARROW key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Up">
            <summary>
            The UP ARROW key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Right">
            <summary>
            The RIGHT ARROW key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Down">
            <summary>
            The DOWN ARROW key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Select">
            <summary>
            The SELECT key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Print">
            <summary>
            The PRINT key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Execute">
            <summary>
            The EXECUTE key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Snapshot">
            <summary>
            The PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Insert">
            <summary>
            The INS key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Delete">
            <summary>
            The DEL key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Help">
            <summary>
            The HELP key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.D0">
            <summary>
            The 0 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.D1">
            <summary>
            The 1 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.D2">
            <summary>
            The 2 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.D3">
            <summary>
            The 3 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.D4">
            <summary>
            The 4 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.D5">
            <summary>
            The 5 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.D6">
            <summary>
            The 6 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.D7">
            <summary>
            The 7 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.D8">
            <summary>
            The 8 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.D9">
            <summary>
            The 9 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.A">
            <summary>
            The A key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.B">
            <summary>
            The B key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.C">
            <summary>
            The C key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.D">
            <summary>
            The D key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.E">
            <summary>
            The E key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F">
            <summary>
            The F key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.G">
            <summary>
            The G key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.H">
            <summary>
            The H key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.I">
            <summary>
            The I key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.J">
            <summary>
            The J key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.K">
            <summary>
            The K key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.L">
            <summary>
            The L key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.M">
            <summary>
            The M key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.N">
            <summary>
            The N key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.O">
            <summary>
            The O key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.P">
            <summary>
            The P key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Q">
            <summary>
            The Q key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.R">
            <summary>
            The R key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.S">
            <summary>
            The S key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.T">
            <summary>
            The T key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.U">
            <summary>
            The U key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.V">
            <summary>
            The V key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.W">
            <summary>
            The W key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.X">
            <summary>
            The X key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Y">
            <summary>
            The Y key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Z">
            <summary>
            The Z key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.LeftWindows">
            <summary>
            The Left Windows key (Natural keyboard).
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.RightWindows">
            <summary>
            The Right Windows key (Natural keyboard).
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Applications">
            <summary>
            The Applications key (Natural keyboard).
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Sleep">
            <summary>
            The Computer Sleep key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Numpad0">
            <summary>
            The Numeric keypad 0 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Numpad1">
            <summary>
            The Numeric keypad 1 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Numpad2">
            <summary>
            The Numeric keypad 2 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Numpad3">
            <summary>
            The Numeric keypad 3 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Numpad4">
            <summary>
            The Numeric keypad 4 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Numpad5">
            <summary>
            The Numeric keypad 5 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Numpad6">
            <summary>
            The Numeric keypad 6 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Numpad7">
            <summary>
            The Numeric keypad 7 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Numpad8">
            <summary>
            The Numeric keypad 8 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Numpad9">
            <summary>
            The Numeric keypad 9 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Multiply">
            <summary>
            The Multiply key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Add">
            <summary>
            The Add key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Separator">
            <summary>
            The Separator key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Substract">
            <summary>
            The Subtract key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Decimal">
            <summary>
            The Decimal key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Divide">
            <summary>
            The Divide key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F1">
            <summary>
            The F1 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F2">
            <summary>
            The F2 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F3">
            <summary>
            The F3 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F4">
            <summary>
            The F4 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F5">
            <summary>
            The F5 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F6">
            <summary>
            The F6 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F7">
            <summary>
            The F7 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F8">
            <summary>
            The F8 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F9">
            <summary>
            The F9 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F10">
            <summary>
            The F10 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F11">
            <summary>
            The F11 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F12">
            <summary>
            The F12 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F13">
            <summary>
            The F13 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F14">
            <summary>
            The F14 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F15">
            <summary>
            The F15 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F16">
            <summary>
            The F16 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F17">
            <summary>
            The F17 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F18">
            <summary>
            The F18 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F19">
            <summary>
            The F19 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F20">
            <summary>
            The F20 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F21">
            <summary>
            The F21 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F22">
            <summary>
            The F22 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F23">
            <summary>
            The F23 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.F24">
            <summary>
            The F24 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Numlock">
            <summary>
            The NUM LOCK key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Scroll">
            <summary>
            The SCROLL LOCK key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.LeftShift">
            <summary>
            The Left SHIFT key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.RightShift">
            <summary>
            The Right SHIFT key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.LeftControl">
            <summary>
            The Left CONTROL key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.RightControl">
            <summary>
            The Right CONTROL key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.LeftMenu">
            <summary>
            The Left MENU key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.RightMenu">
            <summary>
            The Right MENU key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Browser_Back">
            <summary>
            The Browser Back key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Browser_Forward">
            <summary>
            The Browser Forward key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Browser_Refresh">
            <summary>
            The Browser Refresh key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Browser_Stop">
            <summary>
            The Browser Stop key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Browser_Search">
            <summary>
            The Browser Search key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Browser_Favorites">
            <summary>
            The Browser Favorites key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Browser_Home">
            <summary>
            The Browser Start and Home key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Volumne_Mute">
            <summary>
            The Volume Mute key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Volumne_Down">
            <summary>
            The Volume Down key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Volumne_Up">
            <summary>
            The Volume Up key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Media_NextTrack">
            <summary>
            The Next Track key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Media_PreviousTrack">
            <summary>
            The Previous Track key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Media_Stop">
            <summary>
            The Stop Media key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Media_PlayPause">
            <summary>
            The Play/Pause Media key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Launch_Mail">
            <summary>
            The Start Mail key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Launch_MediaSelect">
            <summary>
            The Select Media key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Launch_Application1">
            <summary>
            The Start Application 1 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Launch_Application2">
            <summary>
            The Start Application 2 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.OEM_1">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the ';:' key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.OEM_Plus">
            <summary>
            For any country/region, the '+' key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.OEM_Comma">
            <summary>
            For any country/region, the ',' key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.OEM_Minus">
            <summary>
            For any country/region, the '-' key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.OEM_Period">
            <summary>
            For any country/region, the '.' key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.OEM_2">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '/?' key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.OEM_3">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '`~' key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.OEM_4">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '[{' key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.OEM_5">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '\\|' key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.OEM_6">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the ']}' key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.OEM_7">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the 'single-quote/double-quote' key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.OEM_8">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard..
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.OEM_102">
            <summary>
            Either the angle bracket key or the backslash key on the RT 102-key keyboard.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.IME_Process">
            <summary>
            The IME PROCESS key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Packet">
            <summary>
            Used to pass Unicode characters as if they were keystrokes. The VK_PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information, see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KEYUP.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.VK_ATTN">
            <summary>
            The Attn key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.CrSel">
            <summary>
            The CrSel key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.ExSel">
            <summary>
            The ExSel key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.EraseEOF">
            <summary>
            The Erase EOF key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Play">
            <summary>
            The Play key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.Zoom">
            <summary>
            The Zoom key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.PA1">
            <summary>
            The PA1 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Key.OEM_CLEAR">
            <summary>
            The Clear key.
            </summary>
        </member>
        <member name="T:DW.CodedUI.KeyboardCommands">
            <summary>
            Represents keys to be send with the <see cref="T:Microsoft.VisualStudio.TestTools.UITesting.Keyboard"/> or <see cref="T:DW.CodedUI.KeyboardEx"/>.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.Backspace">
            <summary>
            The backspace key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.Break">
            <summary>
            The pause/break key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.CapsLock">
            <summary>
            The caps lock key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.Delete">
            <summary>
            The delete key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.DownArrow">
            <summary>
            The arrow down key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.End">
            <summary>
            The end key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.Enter">
            <summary>
            The enter key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.Escape">
            <summary>
            The escape key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.Help">
            <summary>
            The help key.
            </summary>
            <remarks>Its not available on every keyboard.</remarks>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.Home">
            <summary>
            The home key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.Insert">
            <summary>
            The insert key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.LeftArrow">
            <summary>
            The arrow left key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.NumLock">
            <summary>
            The num lock key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.PageDown">
            <summary>
            The page down key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.PageUp">
            <summary>
            The page up key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.Print">
            <summary>
            The print key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.RightArrow">
            <summary>
            The arrow right key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.ScrollLock">
            <summary>
            The scroll key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.Tab">
            <summary>
            The tab key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.UpArrow">
            <summary>
            The arrow up key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.F1">
            <summary>
            The F1 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.F2">
            <summary>
            The F2 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.F3">
            <summary>
            The F3 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.F4">
            <summary>
            The F4 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.F5">
            <summary>
            The F5 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.F6">
            <summary>
            The F6 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.F7">
            <summary>
            The F7 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.F8">
            <summary>
            The F8 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.F9">
            <summary>
            The F9 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.F10">
            <summary>
            The F10 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.F11">
            <summary>
            The F11 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.F12">
            <summary>
            The F12 key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.F13">
            <summary>
            The F13 key.
            </summary>
            <remarks>Its not available on every keyboard.</remarks>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.F14">
            <summary>
            The F14 key.
            </summary>
            <remarks>Its not available on every keyboard.</remarks>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.F15">
            <summary>
            The F15 key.
            </summary>
            <remarks>Its not available on every keyboard.</remarks>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.F16">
            <summary>
            The F16 key.
            </summary>
            <remarks>Its not available on every keyboard.</remarks>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.KeypadAdd">
            <summary>
            The add key on the number pad.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.KeypadSubtract">
            <summary>
            The substract key on the number pad.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.KeypadMultiply">
            <summary>
            The multiply key on the number pad.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.KeypadDivide">
            <summary>
            The divide key on the number pad.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.Shift">
            <summary>
            The shift key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.Control">
            <summary>
            The control key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.KeyboardCommands.Alt">
            <summary>
            The alt key.
            </summary>
        </member>
        <member name="T:DW.CodedUI.KeyboardEx">
            <summary>
            Provides static methods for performing automated keyboard actions.
            </summary>
            <remarks>
            If typetext does not work as expected, check if System.Windows.Forms.SendKeys.SendWait is working. This is used internally.<br />
            In some cases an App.config file needs to be created for the test project to force the new implementation of that. See <a href="https://msdn.microsoft.com/en-us/library/system.windows.forms.sendkeys.sendwait(v=vs.110).aspx">MSDN</a>.
            </remarks>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.PressKey(DW.CodedUI.Key)">
            <summary>
            Presses and holds the given key down. Use <see cref="M:DW.CodedUI.KeyboardEx.ReleaseKey(DW.CodedUI.Key)"/> to release the key back again.
            </summary>
            <param name="key">The key to press and hold.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.PressKey(DW.CodedUI.ModifierKeys)">
            <summary>
            Presses and holds the given modifier keys down. Use <see cref="M:DW.CodedUI.KeyboardEx.ReleaseKey(DW.CodedUI.ModifierKeys)"/> to release the key back again.
            </summary>
            <param name="modifierKeys">The modifier keys to press and hold.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.PressKey(DW.CodedUI.Key,DW.CodedUI.ModifierKeys)">
            <summary>
            Presses and holds the given key and modifier keys down. Use <see cref="M:DW.CodedUI.KeyboardEx.ReleaseKey(DW.CodedUI.Key,DW.CodedUI.ModifierKeys)"/> to release the key back again.
            </summary>
            <param name="key">The key to press and hold.</param>
            <param name="modifierKeys">The modifier keys to press and hold.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.PressKey(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.Key)">
            <summary>
            Gives the BasicElement the focus and presses and holds the given key down. Use <see cref="M:DW.CodedUI.KeyboardEx.ReleaseKey(DW.CodedUI.Key)"/> to release the key back again.
            </summary>
            <param name="control">The BasicElement who should get the focus before pressing the key.</param>
            <param name="key">The key to press and hold.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.PressKey(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.ModifierKeys)">
            <summary>
            Gives the BasicElement the focus and presses and holds the given modifier keys down. Use <see cref="M:DW.CodedUI.KeyboardEx.ReleaseKey(DW.CodedUI.ModifierKeys)"/> to release the key back again.
            </summary>
            <param name="control">The BasicElement who should get the focus before pressing the key.</param>
            <param name="modifierKeys">The modifier keys to press and hold.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.PressKey(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.Key,DW.CodedUI.ModifierKeys)">
            <summary>
            Gives the BasicElement the focus and presses and holds the given key and modifier keys down. Use <see cref="M:DW.CodedUI.KeyboardEx.ReleaseKey(DW.CodedUI.Key,DW.CodedUI.ModifierKeys)"/> to release the key back again.
            </summary>
            <param name="control">The BasicElement who should get the focus before pressing the key.</param>
            <param name="key">The key to press and hold.</param>
            <param name="modifierKeys">The modifier keys to press and hold.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.ReleaseKey(DW.CodedUI.Key)">
            <summary>
            Releases the key which got pressed before.
            </summary>
            <param name="key">The key to release.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.ReleaseKey(DW.CodedUI.ModifierKeys)">
            <summary>
            Releases the modifier key which got pressed before.
            </summary>
            <param name="modifierKeys">The modifier keys to release.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.ReleaseKey(DW.CodedUI.Key,DW.CodedUI.ModifierKeys)">
            <summary>
            Releases the key and modifier keys which got pressed before.
            </summary>
            <param name="key">The key to release.</param>
            <param name="modifierKeys">The modifier keys to release.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.TypeKey(DW.CodedUI.Key)">
            <summary>
            Types the given key.
            </summary>
            <param name="key">The key to type.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.TypeKey(DW.CodedUI.ModifierKeys)">
            <summary>
            Types the given modifier keys.
            </summary>
            <param name="modifierKeys">The modifier keys to type.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.TypeKey(DW.CodedUI.Key,DW.CodedUI.ModifierKeys)">
            <summary>
            Types the given key while holding the modifier keys.
            </summary>
            <param name="key">The key to type.</param>
            <param name="modifierKeys">The modifier keys to hold while typing.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
            <remarks>Some combinations might not work because of a WinApi problem.<br />
            E.g. Shift+Arrow to select text, consider using KeyboardEx.TypeText("{LEFT}", ModifierKeys.Shift) instead.<br />
            See the possible parameter of the Windows Forms SendWait.</remarks>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.TypeKey(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.Key)">
            <summary>
            Gives the BasicElement the focus and types the given key.
            </summary>
            <param name="control">The BasicElement who should get the focus before typing the key.</param>
            <param name="key">The key to type.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.TypeKey(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.ModifierKeys)">
            <summary>
            Gives the BasicElement the focus and types the given modifier keys.
            </summary>
            <param name="control">The BasicElement who should get the focus before typing the key.</param>
            <param name="modifierKeys">The modifier keys to type.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.TypeKey(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.Key,DW.CodedUI.ModifierKeys)">
            <summary>
            Gives the BasicElement the focus and holds the modifier keys while typing the given key.
            </summary>
            <param name="control">The BasicElement who should get the focus before typing the key.</param>
            <param name="key">The key to type.</param>
            <param name="modifierKeys">The modifier keys to hold while typing.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
            <remarks>Some combinations might not work because of a WinApi problem.<br />
            E.g. Shift+Arrow to select text, consider using KeyboardEx.TypeText("{LEFT}", ModifierKeys.Shift) instead.<br />
            See the possible parameter of the Windows Forms SendWait.</remarks>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.TypeText(System.String)">
            <summary>
            Types the given text.
            </summary>
            <param name="text">The text to type.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.TypeText(System.String,System.Int32)">
            <summary>
            Types the given text with a small delay time between each character.
            </summary>
            <param name="text">The text to type.</param>
            <param name="delay">The time to wait after each character in milliseconds.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.TypeText(System.String,DW.CodedUI.ModifierKeys)">
            <summary>
            Types the given text while holding the modifier keys.
            </summary>
            <param name="text">The text to type.</param>
            <param name="modifierKeys">The modifier keys to hold.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.TypeText(System.String,DW.CodedUI.ModifierKeys,System.Int32)">
            <summary>
            Types the given text while holding the modifier keys with a small delay time between each character.
            </summary>
            <param name="text">The text to type.</param>
            <param name="modifierKeys">The modifier keys to hold.</param>
            <param name="delay">The time to wait after each character in milliseconds.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.TypeText(DW.CodedUI.BasicElements.BasicElement,System.String)">
            <summary>
            Gives the BasicElement the focus and types the given text.
            </summary>
            <param name="control">The BasicElement who should get the focus before typing the text.</param>
            <param name="text">The text to type.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.TypeText(DW.CodedUI.BasicElements.BasicElement,System.String,System.Int32)">
            <summary>
            Gives the BasicElement the focus and types the given text with a small delay time between each character.
            </summary>
            <param name="control">The BasicElement who should get the focus before typing the text.</param>
            <param name="text">The text to type.</param>
            <param name="delay">The time to wait after each character in milliseconds.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.TypeText(DW.CodedUI.BasicElements.BasicElement,System.String,DW.CodedUI.ModifierKeys)">
            <summary>
            Gives the BasicElement the focus and types the given text while holding the modifier keys.
            </summary>
            <param name="control">The BasicElement who should get the focus before typing the text.</param>
            <param name="text">The text to type.</param>
            <param name="modifierKeys">The modifier keys to hold.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.TypeText(DW.CodedUI.BasicElements.BasicElement,System.String,DW.CodedUI.ModifierKeys,System.Int32)">
            <summary>
            Gives the BasicElement the focus and types the given text while holding the modifier keys with a small delay time between each character.
            </summary>
            <param name="control">The BasicElement who should get the focus before typing the text.</param>
            <param name="text">The text to type.</param>
            <param name="modifierKeys">The modifier keys to hold.</param>
            <param name="delay">The time to wait after each character in milliseconds.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.PressModifierKeys(DW.CodedUI.BasicElements.BasicElement,System.Windows.Input.ModifierKeys)">
             <summary>
            "Not supported anymore (PressKey will be called).
             </summary>
             <param name="control">Forwarded to the PressKey method.</param>
             <param name="modifierKeys">Converted and forwarded to the ReleaseKey method.</param>
             <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.ReleaseModifierKeys(DW.CodedUI.BasicElements.BasicElement,System.Windows.Input.ModifierKeys)">
            <summary>
            Not supported anymore (ReleaseKey will be called).
            </summary>
            <param name="control">Not used.</param>
            <param name="modifierKeys">Converted and forwarded to the ReleaseKey method.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.SendKeys(DW.CodedUI.BasicElements.BasicElement,System.String)">
            <summary>
            Not supported anymore (TypeText will be called).
            </summary>
            <param name="control">Forwarded to the TypeText method.</param>
            <param name="text">Forwarded to the TypeText method.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.SendKeys(DW.CodedUI.BasicElements.BasicElement,System.String,System.Windows.Input.ModifierKeys)">
            <summary>
            Not supported anymore (TypeText will be called).
            </summary>
            <param name="control">Forwarded to the TypeText method.</param>
            <param name="text">Forwarded to the TypeText method.</param>
            <param name="modifierKeys">Converted and forwarded to the TypeText method.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.PressModifierKeys(System.Windows.Input.ModifierKeys)">
            <summary>
            Not supported anymore (PressKey will be called).
            </summary>
            <param name="modifierKeys">Converted and forwarded to the PressKey method.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.ReleaseModifierKeys(System.Windows.Input.ModifierKeys)">
            <summary>
            Not supported anymore (ReleaseKey will be called).
            </summary>
            <param name="modifierKeys">Converted and forwarded to the ReleaseKey method.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.SendKeys(System.String)">
            <summary>
            Not supported anymore (TypeText will be called).
            </summary>
            <param name="text">Forwarded to the TypeText method.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.SendKeys(System.String,System.Boolean)">
            <summary>
            Not supported anymore (TypeText will be called).
            </summary>
            <param name="text">Forwarded to the TypeText method.</param>
            <param name="isEncoded">Not used.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.SendKeys(System.String,System.Windows.Input.ModifierKeys)">
            <summary>
            Not supported anymore (TypeText will be called).
            </summary>
            <param name="text">Forwarded to the TypeText method.</param>
            <param name="modifierKeys">Converted and forwarded to the TypeText method.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.SendKeys(System.String,System.Windows.Input.ModifierKeys,System.Boolean)">
            <summary>
            Not supported anymore (TypeText will be called).
            </summary>
            <param name="text">Forwarded to the TypeText method.</param>
            <param name="modifierKeys">Converted and forwarded to the TypeText method.</param>
            <param name="isEncoded">Not used.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.KeyboardEx.SendKeys(System.String,System.Windows.Input.ModifierKeys,System.Boolean,System.Boolean)">
            <summary>
            Not supported anymore (TypeText will be called).
            </summary>
            <param name="text">Forwarded to the TypeText method.</param>
            <param name="modifierKeys">Converted and forwarded to the TypeText method.</param>
            <param name="isEncoded">Not used.</param>
            <param name="isUnicode">Not used.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="P:DW.CodedUI.KeyboardEx.SendKeysDelay">
            <summary>
            Not supported anymore (it does nothing). Consider using the overloads with the delay parameter.
            </summary>
        </member>
        <member name="T:DW.CodedUI.MissingWindowException">
            <summary>
            Represents errors that occur during searching for elements starting from a window.
            </summary>
        </member>
        <member name="M:DW.CodedUI.MissingWindowException.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.MissingWindowException"/> class.
            </summary>
            <param name="lastWindow">True if the last window was tried to be used but is not there; false if its the main window.</param>
        </member>
        <member name="T:DW.CodedUI.ModifierKeys">
            <summary>
            Represents the modifier keys.
            </summary>
        </member>
        <member name="F:DW.CodedUI.ModifierKeys.Alt">
            <summary>
            The ALT key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.ModifierKeys.Control">
            <summary>
            The CTRL key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.ModifierKeys.Shift">
            <summary>
            The SHIFT key.
            </summary>
        </member>
        <member name="F:DW.CodedUI.ModifierKeys.Windows">
            <summary>
            The Left Windows key (Natural keyboard).
            </summary>
        </member>
        <member name="T:DW.CodedUI.MouseButtons">
            <summary>
            Represents mouse buttons.
            </summary>
        </member>
        <member name="F:DW.CodedUI.MouseButtons.Left">
            <summary>
            The left mouse button.
            </summary>
        </member>
        <member name="F:DW.CodedUI.MouseButtons.Middle">
            <summary>
            The middle mouse button.
            </summary>
        </member>
        <member name="F:DW.CodedUI.MouseButtons.Right">
            <summary>
            The right mouse button.
            </summary>
        </member>
        <member name="T:DW.CodedUI.MouseEx">
            <summary>
            Provides static methods for performing mouse actions in a user interface.
            </summary>
        </member>
        <member name="M:DW.CodedUI.MouseEx.Click">
            <summary>
            Executes a mouse left click.
            </summary>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.Click(DW.CodedUI.ModifierKeys)">
            <summary>
            Executes a mouse left click while holding specific modifier keys.
            </summary>
            <param name="modifierKeys">The modifier keys to be hold while the click is executed.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.Click(DW.CodedUI.MouseButtons)">
            <summary>
            Executes a mouse click with specific mouse buttons.
            </summary>
            <param name="buttons">The mouse buttons which will be clicked.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.Click(System.Drawing.Point)">
            <summary>
            Executes a mouse left click at a specific position within the screen.
            </summary>
            <param name="screenCoordinate">The point on the whole screen where to click.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.Click(DW.CodedUI.MouseButtons,DW.CodedUI.ModifierKeys,System.Drawing.Point)">
            <summary>
            Executes a mouse click at a specific position within the screen by using specific mouse buttons and holding a modifier key.
            </summary>
            <param name="buttons">The mouse buttons which will be clicked.</param>
            <param name="modifierKeys">The modifier keys to be hold while the click is executed.</param>
            <param name="screenCoordinate">The point on the whole screen where to click.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.Click(DW.CodedUI.BasicElements.BasicElement)">
            <summary>
            Executes a mouse left click in the center of the given basic element.
            </summary>
            <param name="element">The basic element to be clicked.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.Click(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.At)">
            <summary>
            Executes a mouse left click on a relative position inside the given basic element.
            </summary>
            <param name="element">The basic element to be clicked.</param>
            <param name="relativePosition">The relative position in the control where to click.</param>
            <returns>A combinable Do to be able to append additional actions</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.Click(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.ModifierKeys)">
            <summary>
            Executes a mouse left click in the center of the given basic element with holding modifier keys.
            </summary>
            <param name="element">The basic element to be clicked.</param>
            <param name="modifierKeys">The modifier keys to be hold while the click is executed.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.Click(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.ModifierKeys,DW.CodedUI.At)">
            <summary>
            Executes a mouse left click at a relative position of the given basic element with holding modifier keys.
            </summary>
            <param name="element">The basic element to be clicked.</param>
            <param name="modifierKeys">The modifier keys to be hold while the click is executed.</param>
            <param name="relativePosition">The relative position in the control where to click.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.Click(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.MouseButtons)">
            <summary>
            Executes a mouse click with specific mouse buttons in the center of the given basic element.
            </summary>
            <param name="element">The basic element to be clicked.</param>
            <param name="buttons">The mouse buttons which will be clicked.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.Click(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.MouseButtons,DW.CodedUI.At)">
            <summary>
            Executes a mouse click with specific mouse buttons on a relative position in the given basic element.
            </summary>
            <param name="element">The basic element to be clicked.</param>
            <param name="buttons">The mouse buttons which will be clicked.</param>
            <param name="relativePosition">The relative position in the control where to click.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.Click(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.MouseButtons,DW.CodedUI.ModifierKeys)">
            <summary>
            Executes a mouse click with specific mouse buttons and hold modifier keys in the center of the given basic element.
            </summary>
            <param name="element">The basic element to be clicked.</param>
            <param name="buttons">The mouse buttons which will be clicked.</param>
            <param name="modifierKeys">The modifier keys to be hold while the click is executed.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.Click(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.MouseButtons,DW.CodedUI.ModifierKeys,DW.CodedUI.At)">
            <summary>
            Executes a mouse click with specific mouse buttons and hold modifier keys in the relative position of the given basic element.
            </summary>
            <param name="element">The basic element to be clicked.</param>
            <param name="buttons">The mouse buttons which will be clicked.</param>
            <param name="modifierKeys">The modifier keys to be hold while the click is executed.</param>
            <param name="relativePosition">The relative position in the control where to click.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.DoubleClick">
            <summary>
            Executes a mouse double left click.
            </summary>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.DoubleClick(DW.CodedUI.ModifierKeys)">
            <summary>
            Executes a mouse left double click while holding the modifier keys.
            </summary>
            <param name="modifierKeys">The modifier keys to be hold while the double click is executed.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.DoubleClick(DW.CodedUI.MouseButtons)">
            <summary>
            Executes a mouse double click with specific mouse buttons.
            </summary>
            <param name="buttons">The mouse buttons which will be double clicked.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.DoubleClick(System.Drawing.Point)">
            <summary>
            Executes a mouse left double click at a specific position within the screen.
            </summary>
            <param name="screenCoordinate">The point on the whole screen where to double click.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.DoubleClick(DW.CodedUI.MouseButtons,DW.CodedUI.ModifierKeys,System.Drawing.Point)">
            <summary>
            Executes a mouse double click at a specific position within the screen by using specific mouse buttons and holding a modifier key.
            </summary>
            <param name="buttons">The mouse buttons which will be double clicked.</param>
            <param name="modifierKeys">The modifier keys to be hold while the double click is executed.</param>
            <param name="screenCoordinate">The point on the whole screen where to double click.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.DoubleClick(DW.CodedUI.BasicElements.BasicElement)">
            <summary>
            Executes a mouse left double click in the center of the given basic element.
            </summary>
            <param name="element">The basic element to be double clicked.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.DoubleClick(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.At)">
            <summary>
            Executes a mouse left double click on a relative position inside the given basic element.
            </summary>
            <param name="element">The basic element to be double clicked.</param>
            <param name="relativePosition">The relative position in the control where to double click.</param>
            <returns>A combinable Do to be able to append additional actions</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.DoubleClick(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.ModifierKeys)">
            <summary>
            Executes a mouse left double click in the center of the given basic element with holding modifier keys.
            </summary>
            <param name="element">The basic element to be double clicked.</param>
            <param name="modifierKeys">The modifier keys to be hold while the double click is executed.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.DoubleClick(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.ModifierKeys,DW.CodedUI.At)">
            <summary>
            Executes a mouse left double click at a relative position of the given basic element with holding modifier keys.
            </summary>
            <param name="element">The basic element to be double clicked.</param>
            <param name="modifierKeys">The modifier keys to be hold while the double click is executed.</param>
            <param name="relativePosition">The relative position in the control where to double click.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.DoubleClick(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.MouseButtons)">
            <summary>
            Executes a mouse double click with specific mouse buttons in the center of the given basic element.
            </summary>
            <param name="element">The basic element to be double clicked.</param>
            <param name="buttons">The mouse buttons which will be double clicked.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.DoubleClick(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.MouseButtons,DW.CodedUI.At)">
            <summary>
            Executes a mouse double click with specific mouse buttons on a relative position in the given basic element.
            </summary>
            <param name="element">The basic element to be double clicked.</param>
            <param name="buttons">The mouse buttons which will be double clicked.</param>
            <param name="relativePosition">The relative position in the control where to double click.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.DoubleClick(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.MouseButtons,DW.CodedUI.ModifierKeys)">
            <summary>
            Executes a mouse double click with specific mouse buttons and hold modifier keys in the center of the given basic element.
            </summary>
            <param name="element">The basic element to be double clicked.</param>
            <param name="buttons">The mouse buttons which will be double clicked.</param>
            <param name="modifierKeys">The modifier keys to be hold while the double click is executed.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.DoubleClick(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.MouseButtons,DW.CodedUI.ModifierKeys,DW.CodedUI.At)">
            <summary>
            Executes a mouse double click with specific mouse buttons and hold modifier keys in the relative position of the given basic element.
            </summary>
            <param name="element">The basic element to be clicked.</param>
            <param name="buttons">The mouse buttons which will be double clicked.</param>
            <param name="modifierKeys">The modifier keys to be hold while the double click is executed.</param>
            <param name="relativePosition">The relative position in the control where to double click.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.Move(DW.CodedUI.Position)">
            <summary>
            Places the mouse cursor on the specific position.
            </summary>
            <param name="to">The position where the mouse cursor should be placed.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.Move(DW.CodedUI.Position,DW.CodedUI.Position,System.UInt32)">
            <summary>
            Moves the mouse cursor from a specific position to another one within a defined time.
            </summary>
            <param name="from">The position from where the mouse curser should start moving.</param>
            <param name="to">The position the mouse cursort should move to.</param>
            <param name="duration">The time in milliseconds the curser should move.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
            <remarks>During the nature of timings ther always will be an additional offset to the duration.<br />
            E.g. when say it should run for 3 seconds, it will need about 4 seconds.<br />
            If you say it shoudl take about 10 seconds, it will need about 12 seconds and so on.<br />
            It depends the machine performance and distance so the MouseEx cannot adjust the time internally.</remarks>
        </member>
        <member name="M:DW.CodedUI.MouseEx.PressButtons(DW.CodedUI.MouseButtons)">
            <summary>
            Presses and holds the given mouse buttons.
            </summary>
            <param name="buttons">The mouse buttons to press and hold.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.MouseEx.ReleaseButtons(DW.CodedUI.MouseButtons)">
            <summary>
            Releases the given mouse buttons.
            </summary>
            <param name="buttons">The mouse buttons to release.</param>
            <returns>A combinable Do to be able to append additional actions.</returns>
        </member>
        <member name="T:DW.CodedUI.Position">
            <summary>
            Represents a specific position.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Position.Current">
            <summary>
            The current position.
            </summary>
            <returns>The position object to work with.</returns>
        </member>
        <member name="M:DW.CodedUI.Position.Element(DW.CodedUI.BasicElements.BasicElement)">
            <summary>
            Center position of the given BasicElement.
            </summary>
            <param name="element">The BasicElement which position should be taken from.</param>
            <returns>The position object to work with.</returns>
        </member>
        <member name="M:DW.CodedUI.Position.Element(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.At)">
            <summary>
            Relative position inside a specific BasicElement.
            </summary>
            <param name="element">The BasicElement which relative position should be taken from.</param>
            <param name="relativePosition">The relative porision inside the BasicElement.</param>
            <returns>The position object to work with.</returns>
        </member>
        <member name="M:DW.CodedUI.Position.Point(System.Drawing.Point)">
            <summary>
            A specific point.
            </summary>
            <param name="point">The point.</param>
            <returns>The position object to work with.</returns>
        </member>
        <member name="T:DW.CodedUI.UI">
            <summary>
            Brings possibilities to search for UI element in the application surface started from a specific UI element.
            </summary>
        </member>
        <member name="M:DW.CodedUI.UI.GetChild``1(DW.CodedUI.By,DW.CodedUI.From)">
            <summary>
            Searches for a given child element with the passed By conditions. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <typeparam name="TControl">The UI element type to search for.</typeparam>
            <param name="by">Provides the conditions to be used by searching the UI element.</param>
            <param name="from">The source where the start of the UI element has to start from.</param>
            <returns>The found control if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.UI.GetChild``1(DW.CodedUI.By,DW.CodedUI.From,DW.CodedUI.With)">
            <summary>
            Searches for a given child element with the passed By conditions and With settings. If not disabled With.Timeout(10000).And.Assert() gets appended.
            </summary>
            <typeparam name="TControl">The UI element type to search for.</typeparam>
            <param name="by">Provides the conditions to be used by searching the UI element.</param>
            <param name="from">The source where the start of the UI element has to start from.</param>
            <param name="with">The settings to be used while searching.</param>
            <returns>The found control if any; otherwise an exception if it is not disabled. If it is disabled null gets returned.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found. (If not disabled.)</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.UI.GetChild(DW.CodedUI.By,DW.CodedUI.From)">
            <summary>
            Searches for a given child element with the passed By conditions. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <param name="by">Provides the conditions to be used by searching the UI element.</param>
            <param name="from">The source where the start of the UI element has to start from.</param>
            <returns>The found control if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.UI.GetChild(DW.CodedUI.By,DW.CodedUI.From,DW.CodedUI.With)">
            <summary>
            Searches for a given child element with the passed By conditions and With settings. If not disabled With.Timeout(10000).And.Assert() gets appended.
            </summary>
            <param name="by">Provides the conditions to be used by searching the UI element.</param>
            <param name="from">The source where the start of the UI element has to start from.</param>
            <param name="with">The settings to be used while searching.</param>
            <returns>The found control if any; otherwise an exception if it is not disabled. If it is disabled null gets returned.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found. (If not disabled.)</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.UI.GetChildren``1(DW.CodedUI.By,DW.CodedUI.From)">
            <summary>
            Returns all child elements which passes the By conditions. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <typeparam name="TControl">The UI element types to search for.</typeparam>
            <param name="by">Provides the conditions to be used by searching the UI elements.</param>
            <param name="from">The source where the start of the UI element has to start from.</param>
            <returns>A list of found child elements if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">The UI element could not be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.UI.GetChildren``1(DW.CodedUI.By,DW.CodedUI.From,DW.CodedUI.With)">
            <summary>
            Returns all child elements which passes the By conditions and With settings. If not disabled With.Timeout(10000).And.Assert() gets appended.
            </summary>
            <typeparam name="TControl">The UI element types to search for.</typeparam>
            <param name="by">Provides the conditions to be used by searching the UI elements.</param>
            <param name="from">The source where the start of the UI element has to start from.</param>
            <param name="with">The settings to be used while searching.</param>
            <returns>A list of found child elements if any; otherwise an exception if it is not disabled. If it is disabled an empty list gets returned.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">The UI element could not be found. (If not disabled.)</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.UI.GetChildren(DW.CodedUI.By,DW.CodedUI.From)">
            <summary>
            Returns all child elements which passes the By conditions. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <param name="by">Provides the conditions to be used by searching the UI elements.</param>
            <param name="from">The source where the start of the UI element has to start from.</param>
            <returns>A list of found child elements if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">The UI element could not be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.UI.GetChildren(DW.CodedUI.By,DW.CodedUI.From,DW.CodedUI.With)">
            <summary>
            Returns all child elements which passes the By conditions and With settings. If not disabled With.Timeout(10000).And.Assert() gets appended.
            </summary>
            <param name="by">Provides the conditions to be used by searching the UI elements.</param>
            <param name="from">The source where the start of the UI element has to start from.</param>
            <param name="with">The settings to be used while searching.</param>
            <returns>A list of found child elements if any; otherwise an exception if it is not disabled. If it is disabled an empty list gets returned.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">The UI element could not be found. (If not disabled.)</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.UI.GetParent(DW.CodedUI.From)">
            <summary>
            Returns the parent element of the given source. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <param name="from">The source from where to start reading the parent elements.</param>
            <returns>The available parent control if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.UI.GetParent(DW.CodedUI.From,DW.CodedUI.With)">
            <summary>
            Returns the parent element of the given source. If not disabled With.Assert().And.Timeout(10000) gets appended.
            </summary>
            <param name="from">The source from where to start reading the parent elements.</param>
            <param name="with">The settings to be used while searching.</param>
            <returns>The found parent control if any; otherwise an exception if it is not disabled. If it is disabled null gets returned.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found. (If not disabled.)</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.UI.GetParent``1(DW.CodedUI.From)">
            <summary>
            Returns the parent element of the given source. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <typeparam name="TControl">The UI element type to search for.</typeparam>
            <param name="from">The source from where to start reading the parent elements.</param>
            <returns>The available parent control if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.UI.GetParent``1(DW.CodedUI.From,DW.CodedUI.With)">
            <summary>
            Returns the parent element of the given source. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <typeparam name="TControl">The UI element type to search for.</typeparam>
            <param name="from">The source from where to start reading the parent elements.</param>
            <param name="with">The settings to be used while searching.</param>
            <returns>The available parent control if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.UI.GetParent(DW.CodedUI.By,DW.CodedUI.From)">
            <summary>
            Returns the parent element of the given source. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <param name="by">Provides the conditions to be used by searching the UI element.</param>
            <param name="from">The source from where to start reading the parent elements.</param>
            <returns>The available parent control if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.UI.GetParent(DW.CodedUI.By,DW.CodedUI.From,DW.CodedUI.With)">
            <summary>
            Returns the parent element of the given source. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <param name="by">Provides the conditions to be used by searching the UI element.</param>
            <param name="from">The source from where to start reading the parent elements.</param>
            <param name="with">The settings to be used while searching.</param>
            <returns>The available parent control if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.UI.GetParent``1(DW.CodedUI.By,DW.CodedUI.From)">
            <summary>
            Returns the parent element of the given source. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <typeparam name="TControl">The UI element type to search for.</typeparam>
            <param name="by">Provides the conditions to be used by searching the UI element.</param>
            <param name="from">The source from where to start reading the parent elements.</param>
            <returns>The available parent control if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.UI.GetParent``1(DW.CodedUI.By,DW.CodedUI.From,DW.CodedUI.With)">
            <summary>
            Returns the parent element of the given source. By default With.Assert().And.Timeout(10000) is in use.
            </summary>
            <typeparam name="TControl">The UI element type to search for.</typeparam>
            <param name="by">Provides the conditions to be used by searching the UI element.</param>
            <param name="from">The source from where to start reading the parent elements.</param>
            <param name="with">The settings to be used while searching.</param>
            <returns>The available parent control if any; otherwise an exception.</returns>
            <exception cref="T:DW.CodedUI.UIElementNotFoundException">No UI element could be found.</exception>
            <remarks>To change the default With settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.UI.GetFullUITree(System.Windows.Automation.AutomationElement)">
            <summary>
            Returns a tree of information objects which shows the whole tree below the given object.
            </summary>
            <param name="element">The parent object from which all child elements have to be read.</param>
            <returns>The given element as an information object wich all its children in a tree.</returns>
        </member>
        <member name="M:DW.CodedUI.UI.GetFullUITreeData(DW.CodedUI.BasicElements.BasicElement)">
            <summary>
            Returns a tree of data objects which are a shadow copy of each element at the call time.
            </summary>
            <param name="element">The parent object from which all child element data have to be read.</param>
            <returns>The given element as an shadow copy wich all its children in a tree.</returns>
        </member>
        <member name="T:DW.CodedUI.UIElementNotFoundException">
            <summary>
            Represents errors that occur if an element in the UI cannot be found.
            </summary>
        </member>
        <member name="M:DW.CodedUI.UIElementNotFoundException.#ctor(DW.CodedUI.By,System.Boolean,System.Boolean,System.UInt32,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.UIElementNotFoundException"/> class.
            </summary>
            <param name="by">The conditions how the element has been searched.</param>
            <param name="useTimeout">A value that indicates if a timeout was used.</param>
            <param name="useInterval">A value that indicates if an interval was used.</param>
            <param name="intervalTime">The time used in the interval.</param>
            <param name="timeout">The elapsed search time.</param>
            <param name="multiply">A value that indicates if one or multiple elements has been searched.</param>
        </member>
        <member name="T:DW.CodedUI.UIElementNotReadyException">
            <summary>
            Represents errors that occur if an element got found in the UI but became not ready to use.
            </summary>
        </member>
        <member name="M:DW.CodedUI.UIElementNotReadyException.#ctor(System.Boolean,System.Boolean,DW.CodedUI.By,System.Boolean,System.Boolean,System.UInt32,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.UIElementNotReadyException"/> class.
            </summary>
            <param name="isEnabled">A value that indicates if the element was enabled.</param>
            <param name="isVisible">A value that indicates if the element was visible.</param>
            <param name="by">The conditions how the element has been searched.</param>
            <param name="useTimeout">A value that indicates if a timeout was used.</param>
            <param name="useInterval">A value that indicates if an interval was used.</param>
            <param name="intervalTime">The time used in the interval.</param>
            <param name="timeout">The elapsed search time.</param>
            <param name="multiply">A value that indicates if one or multiple elements has been searched.</param>
        </member>
        <member name="T:DW.CodedUI.Utilities.ColorDetector">
            <summary>
            Brings you possibility to get the color of from specific position.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Utilities.ColorDetector.GetColor(DW.CodedUI.BasicElements.BasicElement)">
            <summary>
            Gets the color at the center of the BasicElement.
            </summary>
            <param name="element">The BasicElement which color should be read.</param>
            <returns>The System.Drawing.Color at the center of the BasicElement.</returns>
        </member>
        <member name="M:DW.CodedUI.Utilities.ColorDetector.GetColor(DW.CodedUI.BasicElements.BasicElement,DW.CodedUI.At)">
            <summary>
            Gets the color at the relative position inside a BasicElement.
            </summary>
            <param name="element">The BasicElement which color should be read.</param>
            <param name="relativePosition">The relative position inside the BasicElement.</param>
            <returns>The System.Drawing.Color at the relative position inside the BasicElement.</returns>
        </member>
        <member name="M:DW.CodedUI.Utilities.ColorDetector.GetColor(System.Drawing.Point)">
            <summary>
            Gets the color at a specific position.
            </summary>
            <param name="point">The position where from the color should be read.</param>
            <returns>The System.Drawing.Color at a specific position.</returns>
        </member>
        <member name="M:DW.CodedUI.Utilities.ColorDetector.GetColor(DW.CodedUI.BasicElements.BasicElement,System.Int32,System.Int32)">
            <summary>
            Gets the color of a BasicElement on a specific relative position
            </summary>
            <param name="element">The element to get the color from</param>
            <param name="relativePositionX">Relative position from the left side of the control</param>
            <param name="relativePositionY">Relative position from the top of the control</param>
            <returns>The System.Drawing.Color at the specific position.</returns>
        </member>
        <member name="T:DW.CodedUI.Utilities.DynamicSleep">
            <summary>
            Holds methods for a dynamic sleep.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Utilities.DynamicSleep.Wait">
            <summary>
            Suspends the current thread for a specified time in milliseconds. The time can be adjusted in the <see cref="P:DW.CodedUI.CodedUIEnvironment.SleepSettings"/>.Default.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Utilities.DynamicSleep.Wait(DW.CodedUI.Utilities.Time)">
            <summary>
            Suspends the current thread for a specified time in milliseconds. The time can be adjusted in the <see cref="P:DW.CodedUI.CodedUIEnvironment.SleepSettings"/>.
            </summary>
            <param name="time">The length of time to suspend.</param>
        </member>
        <member name="M:DW.CodedUI.Utilities.DynamicSleep.Wait(System.Int32)">
            <summary>
            Suspends the current thread for a specified time in milliseconds.
            </summary>
            <param name="milliseconds">The time to suspend in milliseconds.</param>
        </member>
        <member name="T:DW.CodedUI.Utilities.ElementFilters">
            <summary>
            Defines which <see cref="T:DW.CodedUI.BasicElements.BasicElement"/> properties should be observed.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.ElementFilters.IsEnabledStateChanged">
            <summary>
            The <see cref="P:DW.CodedUI.BasicElements.BasicElement.IsEnabled"/> property should be observed.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.ElementFilters.Destroyed">
            <summary>
            The element gets destroyed.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.ElementFilters.IsVisibleStateChanged">
            <summary>
            The <see cref="P:DW.CodedUI.BasicElements.BasicElement.IsEnabled"/> property should be observed.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.ElementFilters.NameChanged">
            <summary>
            The <see cref="P:DW.CodedUI.BasicElements.BasicElement.Name"/> property should be observed.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.ElementFilters.PositionChanged">
            <summary>
            The position (Properties.BoundingRectangle) property should be observed.
            </summary>
        </member>
        <member name="T:DW.CodedUI.Utilities.ElementInfo">
            <summary>
            Represents the data of the observed <see cref="T:DW.CodedUI.BasicElements.BasicElement"/>.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Utilities.ElementInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current <see cref="T:DW.CodedUI.Utilities.ElementInfo"/>.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified System.Object is equal to the current <see cref="T:DW.CodedUI.Utilities.ElementInfo"/>; otherwise, false.</returns>
        </member>
        <member name="M:DW.CodedUI.Utilities.ElementInfo.Equals(DW.CodedUI.Utilities.ElementInfo)">
            <summary>
            Determines whether the specified <see cref="T:DW.CodedUI.Utilities.ElementInfo"/> is equal to the current <see cref="T:DW.CodedUI.Utilities.ElementInfo"/>.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns>true if the specified <see cref="T:DW.CodedUI.Utilities.ElementInfo"/> is equal to the current <see cref="T:DW.CodedUI.Utilities.ElementInfo"/>; otherwise, false.</returns>
        </member>
        <member name="M:DW.CodedUI.Utilities.ElementInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:DW.CodedUI.Utilities.ElementInfo"/>.</returns>
        </member>
        <member name="P:DW.CodedUI.Utilities.ElementInfo.BasicElementData">
            <summary>
            Gets the data of the observed <see cref="T:DW.CodedUI.BasicElements.BasicElement"/>.
            </summary>
        </member>
        <member name="T:DW.CodedUI.Utilities.ElementListener">
            <summary>
            Brings possibilities to observe a <see cref="T:DW.CodedUI.BasicElements.BasicElement"/> to get events if something happened.
            </summary>
        </member>
        <member name="T:DW.CodedUI.Utilities.Listener">
            <summary>
            Brings possibilities to let run actions continiously by a timer.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.Listener._checks">
            <summary>
            Gets or sets the check to be executed on each timer tick.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Utilities.Listener.Start">
            <summary>
            Starts the timer which runs all checks on each tick.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Utilities.Listener.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Utilities.Listener.ChecksOver">
            <summary>
            Called when all checks are executed.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Utilities.Listener.Invoke``1(System.EventHandler{``0},``0)">
            <summary>
            Invokes an event asynchronously or not dependent from the CodedUIEnvironment.ListenerSettings.AsyncEventInvoke property.
            </summary>
            <typeparam name="T">The type of the event args.</typeparam>
            <param name="handler">The event to invoke.</param>
            <param name="e">The event args to pass to the event.</param>
        </member>
        <member name="M:DW.CodedUI.Utilities.ElementListener.#ctor(DW.CodedUI.BasicElements.BasicElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.Utilities.ElementListener"/> class.
            </summary>
            <param name="element">The BasicElement which states should be listened to.</param>
        </member>
        <member name="M:DW.CodedUI.Utilities.ElementListener.Start">
            <summary>
            Starts observing of the <see cref="T:DW.CodedUI.BasicElements.BasicElement"/> properties. To say which one see <see cref="P:DW.CodedUI.Utilities.ElementListener.Filters"/>.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Utilities.ElementListener.Stop">
            <summary>
            Stopps observing of the <see cref="T:DW.CodedUI.BasicElements.BasicElement"/> properties.
            </summary>
            <remarks>The <see cref="P:DW.CodedUI.Utilities.ElementListener.Filters"/> will not be resetted.</remarks>
        </member>
        <member name="M:DW.CodedUI.Utilities.ElementListener.ChecksOver">
            <summary>
            All checks are done and the current <see cref="T:DW.CodedUI.BasicElements.BasicElement"/> state can be taken.
            </summary>
        </member>
        <member name="E:DW.CodedUI.Utilities.ElementListener.ElementIsEnabledStateChanged">
            <summary>
            Occurs when the IsEnabled state of the <see cref="T:DW.CodedUI.BasicElements.BasicElement"/> changes.
            </summary>
        </member>
        <member name="E:DW.CodedUI.Utilities.ElementListener.ElementDestroyed">
            <summary>
            Occurs when the <see cref="T:DW.CodedUI.BasicElements.BasicElement"/> got destroyed.
            </summary>
        </member>
        <member name="E:DW.CodedUI.Utilities.ElementListener.ElementIsVisibleStateChanged">
            <summary>
            Occurs when the IsVisible state of the <see cref="T:DW.CodedUI.BasicElements.BasicElement"/> changes.
            </summary>
        </member>
        <member name="E:DW.CodedUI.Utilities.ElementListener.ElementNameChanged">
            <summary>
            Occurs when the Name of the <see cref="T:DW.CodedUI.BasicElements.BasicElement"/> changes.
            </summary>
        </member>
        <member name="E:DW.CodedUI.Utilities.ElementListener.ElementPositionChanged">
            <summary>
            Occurs when the position (BoundingRectangle) of the <see cref="T:DW.CodedUI.BasicElements.BasicElement"/> changes.
            </summary>
        </member>
        <member name="P:DW.CodedUI.Utilities.ElementListener.Filters">
            <summary>
            Gets or sets values which indicates which properties of the <see cref="T:DW.CodedUI.BasicElements.BasicElement"/> should be observed.
            </summary>
        </member>
        <member name="T:DW.CodedUI.Utilities.ElementChangeKind">
            <summary>
            Defines how an element has been changed. See <see cref="T:DW.CodedUI.Utilities.ElementListener"/>.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.ElementChangeKind.PositionChanged">
            <summary>
            The position of the element has been changed.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.ElementChangeKind.NameChanged">
            <summary>
            The name of the element has been changed.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.ElementChangeKind.Enabled">
            <summary>
            An element got enabled.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.ElementChangeKind.Destroyed">
            <summary>
            An element got destroyed.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.ElementChangeKind.VisibleStateChanged">
            <summary>
            The visibility state of the element got changed.
            </summary>
        </member>
        <member name="T:DW.CodedUI.Utilities.ElementChangedEventArgs">
            <summary>
            Holds the old and new <see cref="T:DW.CodedUI.Utilities.ElementInfo"/> objects for events in the <see cref="T:DW.CodedUI.Utilities.ElementListener"/>.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Utilities.ElementChangedEventArgs.#ctor(DW.CodedUI.Utilities.ElementChangeKind,DW.CodedUI.Utilities.ElementInfo,DW.CodedUI.Utilities.ElementInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.Utilities.ElementChangedEventArgs"/> class.
            </summary>
        </member>
        <member name="P:DW.CodedUI.Utilities.ElementChangedEventArgs.ElementChangeKind">
            <summary>
            Gets a value that indicated what on the element has been changed.
            </summary>
        </member>
        <member name="P:DW.CodedUI.Utilities.ElementChangedEventArgs.OldElementInfo">
            <summary>
            Gets the <see cref="T:DW.CodedUI.Utilities.ElementInfo"/> with the old state.
            </summary>
        </member>
        <member name="P:DW.CodedUI.Utilities.ElementChangedEventArgs.NewElementInfo">
            <summary>
            Gets the <see cref="T:DW.CodedUI.Utilities.ElementInfo"/> with the new state.
            </summary>
        </member>
        <member name="T:DW.CodedUI.Utilities.Highlighter">
            <summary>
            Shows you an colored border on a UI control.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Utilities.Highlighter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="N:DW.CodedUI.Utilities"/> class.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Utilities.Highlighter.Highlight(System.Windows.Automation.AutomationElement)">
            <summary>
            Highlight the given control.
            </summary>
            <param name="element">The control to highlight.</param>
        </member>
        <member name="M:DW.CodedUI.Utilities.Highlighter.Highlight(System.Drawing.Rectangle)">
            <summary>
            Highlight the given region.
            </summary>
            <param name="region">The region to highlight.</param>
        </member>
        <member name="T:DW.CodedUI.Utilities.InExclude">
            <summary>
            Defines if something has to be with or without anything.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.InExclude.With">
            <summary>
            It has to be with it.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.InExclude.Without">
            <summary>
            It does not have to be with it.
            </summary>
        </member>
        <member name="T:DW.CodedUI.Utilities.LogWriter">
            <summary>
            Write the log file(s) with the entries created during execute tests.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Utilities.LogWriter.Write(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)">
            <summary>
            Writes the log file(s). Its intended to be used on the text cleanup.
            </summary>
            <param name="testContext">The TextContext of the test class.</param>
            <remarks>You get the test context created by adding a public property into the class with the cleanup. 
            For configuring see <see cref="P:DW.CodedUI.CodedUIEnvironment.LoggerSettings"/>.</remarks>
            <example>
            <code lang="csharp">
            <![CDATA[
            [CodedUITest]
            public class SomethingTests
            {
                public TestContext TestContext { get; set; }
            
                [TestInitialize]
                public void Setup()
                {
                    CodedUIEnvironment.LoggerSettings.LogFilesDirectory = @"D:\CodedUI_Logs";
                }
            
                [TestCleanup]
                public void Cleanup()
                {
                    LogWriter.Write(TestContext);
                }
            
                [TestMethod]
                public void Any_Test_Using_The_DW_CodedUI()
                {
                    // Something
                }
            }]]>
            </code>
            </example>
        </member>
        <member name="T:DW.CodedUI.Utilities.WindowChangeKind">
            <summary>
            Defines how a window has been changed. See <see cref="T:DW.CodedUI.Utilities.WindowListener"/>.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.WindowChangeKind.Opened">
            <summary>
            A window is opened.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.WindowChangeKind.Closed">
            <summary>
            A window is closed.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.WindowChangeKind.VisibleStateChanged">
            <summary>
            The visibility state of a window has been changed.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.WindowChangeKind.TitleChanged">
            <summary>
            The title of a window has been changed.
            </summary>
        </member>
        <member name="T:DW.CodedUI.Utilities.WindowFilters">
            <summary>
            Defines which window state change should be observed.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.WindowFilters.Opened">
            <summary>
            A window is opened.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.WindowFilters.Closed">
            <summary>
            A window is closed.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.WindowFilters.VisibilityChanged">
            <summary>
            A window visitibily has been changed.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.WindowFilters.TitleChanged">
            <summary>
            A window title has been changed.
            </summary>
        </member>
        <member name="T:DW.CodedUI.Utilities.WindowListener">
            <summary>
            Brings possibilities to observe the system to get events if something with the windows happened.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Utilities.WindowListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.Utilities.WindowListener"/> class.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Utilities.WindowListener.Start">
            <summary>
            Starts observing of the system windows. To say what exactly see <see cref="P:DW.CodedUI.Utilities.WindowListener.Filters"/>.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Utilities.WindowListener.Stop">
            <summary>
            Stopps observing of the system windows.
            </summary>
            <remarks>The <see cref="P:DW.CodedUI.Utilities.ElementListener.Filters"/> will not be resetted.</remarks>
        </member>
        <member name="M:DW.CodedUI.Utilities.WindowListener.ChecksOver">
            <summary>
            All checks are done and the current window states can be taken.
            </summary>
        </member>
        <member name="E:DW.CodedUI.Utilities.WindowListener.WindowOpened">
            <summary>
            Occurs when a window is opened.
            </summary>
        </member>
        <member name="E:DW.CodedUI.Utilities.WindowListener.WindowClosed">
            <summary>
            Occurs when a window is closed.
            </summary>
        </member>
        <member name="E:DW.CodedUI.Utilities.WindowListener.WindowVisibilityChanged">
            <summary>
            Occurs when the visibility of a window has been changed.
            </summary>
        </member>
        <member name="E:DW.CodedUI.Utilities.WindowListener.WindowTitleChanged">
            <summary>
            Occurs when the title of a window has been changed.
            </summary>
        </member>
        <member name="P:DW.CodedUI.Utilities.WindowListener.Filters">
            <summary>
            Gets or sets values which indicates which properties of the <see cref="T:DW.CodedUI.BasicElements.BasicElement"/> should be observed.
            </summary>
        </member>
        <member name="T:DW.CodedUI.Utilities.Time">
            <summary>
            Holds a bunch of available time length to be used in the <see cref="T:DW.CodedUI.Utilities.DynamicSleep"/>.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.Time.VeryShort">
            <summary>
            Represents a very short time. The time can be adjusted in the <see cref="P:DW.CodedUI.CodedUIEnvironment.SleepSettings"/>.VeryShort. The default is 500 milliseconds.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.Time.Short">
            <summary>
            Represents a very short time. The time can be adjusted in the <see cref="P:DW.CodedUI.CodedUIEnvironment.SleepSettings"/>.Short. The default is 1000 milliseconds.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.Time.Medium">
            <summary>
            Represents a very short time. The time can be adjusted in the <see cref="P:DW.CodedUI.CodedUIEnvironment.SleepSettings"/>.Medium. The default is 1500 milliseconds.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.Time.Long">
            <summary>
            Represents a very short time. The time can be adjusted in the <see cref="P:DW.CodedUI.CodedUIEnvironment.SleepSettings"/>.Long. The default is 2000 milliseconds.
            </summary>
        </member>
        <member name="F:DW.CodedUI.Utilities.Time.VeryLong">
            <summary>
            Represents a very short time. The time can be adjusted in the <see cref="P:DW.CodedUI.CodedUIEnvironment.SleepSettings"/>.VeryLong. The default is 2500 milliseconds.
            </summary>
        </member>
        <member name="T:DW.CodedUI.Utilities.WindowFocus">
            <summary>
            Brings possibilities to bring all windows on top.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Utilities.WindowFocus.BringOnTop``1(``0)">
            <summary>
            Brings the given window on top.
            </summary>
            <typeparam name="TWindow">The type of the window passed. This can be a window, messagebox or system dialog.</typeparam>
            <param name="window">The window to be on top. This can be a window, messagebox or system dialog.</param>
        </member>
        <member name="T:DW.CodedUI.Utilities.WindowInfo">
            <summary>
            Represents the data of a window.
            </summary>
        </member>
        <member name="M:DW.CodedUI.Utilities.WindowInfo.Equals(DW.CodedUI.Utilities.WindowInfo)">
            <summary>
            Determines whether the specified <see cref="T:DW.CodedUI.Utilities.WindowInfo"/> is equal to the current <see cref="T:DW.CodedUI.Utilities.WindowInfo"/>.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns>true if the specified <see cref="T:DW.CodedUI.Utilities.WindowInfo"/> is equal to the current <see cref="T:DW.CodedUI.Utilities.WindowInfo"/>; otherwise, false.</returns>
        </member>
        <member name="M:DW.CodedUI.Utilities.WindowInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current <see cref="T:DW.CodedUI.Utilities.WindowInfo"/>.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified System.Object is equal to the current <see cref="T:DW.CodedUI.Utilities.WindowInfo"/>; otherwise, false.</returns>
        </member>
        <member name="M:DW.CodedUI.Utilities.WindowInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:DW.CodedUI.Utilities.WindowInfo"/>.</returns>
        </member>
        <member name="P:DW.CodedUI.Utilities.WindowInfo.Handle">
            <summary>
            Gets the handle of the window.
            </summary>
        </member>
        <member name="P:DW.CodedUI.Utilities.WindowInfo.Title">
            <summary>
            Gets the title of the window.
            </summary>
        </member>
        <member name="P:DW.CodedUI.Utilities.WindowInfo.IsVisible">
            <summary>
            Gets a value which indicates if the window is visible or not.
            </summary>
        </member>
        <member name="T:DW.CodedUI.Utilities.WindowChangedEventArgs">
            <summary>
            Holds the old and new <see cref="T:DW.CodedUI.Utilities.WindowInfo"/> objects for events in the <see cref="T:DW.CodedUI.Utilities.WindowListener"/>.
            </summary>
        </member>
        <member name="P:DW.CodedUI.Utilities.WindowChangedEventArgs.WindowChangeKind">
            <summary>
            Gets a value that indicated what on the window has been changed.
            </summary>
        </member>
        <member name="P:DW.CodedUI.Utilities.WindowChangedEventArgs.OldWindowInfo">
            <summary>
            Gets the <see cref="T:DW.CodedUI.Utilities.WindowInfo"/> with the old state.
            </summary>
        </member>
        <member name="P:DW.CodedUI.Utilities.WindowChangedEventArgs.NewWindowInfo">
            <summary>
            Gets the <see cref="T:DW.CodedUI.Utilities.WindowInfo"/> with the new state.
            </summary>
        </member>
        <member name="T:DW.CodedUI.Utilities.WindowSetup">
            <summary>
            Brings a quick and easy possibility to 
            </summary>
        </member>
        <member name="M:DW.CodedUI.Utilities.WindowSetup.Prepare(DW.CodedUI.BasicElements.BasicWindow)">
            <summary>
            Takes the window to do the setup on it.
            </summary>
            <param name="window">The window to be used for setup.</param>
            <returns>A WindowSetup to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.Utilities.WindowSetup.State(DW.CodedUI.WindowState)">
            <summary>
            Sets the new state of the window.
            </summary>
            <param name="windowState">The new state of the window.</param>
            <returns>A WindowSetup to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.Utilities.WindowSetup.Position(System.Int32,System.Int32)">
            <summary>
            Sets the new position of the window.
            </summary>
            <param name="left">The new position from the left.</param>
            <param name="top">The new position from the top.</param>
            <returns>A WindowSetup to be able to append additional actions.</returns>
        </member>
        <member name="M:DW.CodedUI.Utilities.WindowSetup.Size(System.Int32,System.Int32)">
            <summary>
            Sets the new size of the window.
            </summary>
            <param name="width">The new width of the window.</param>
            <param name="height">The new height of the window.</param>
            <returns>A WindowSetup to be able to append additional actions.</returns>
        </member>
        <member name="T:DW.CodedUI.WindowFinder">
            <summary>
            Searches for Windows, Dialogs or MessageBoxes.
            </summary>
        </member>
        <member name="M:DW.CodedUI.WindowFinder.Search(DW.CodedUI.Use)">
            <summary>
            Searches for a window by the given conditions. Default settings are And.Assert().And.Timeout(10000).
            </summary>
            <param name="use">Defines the conditions to be used for searching for a window.</param>
            <returns>The found window if any; otherwise an exception is shown.</returns>
            <exception cref="T:DW.CodedUI.WindowNotFoundException">The window could not be found.</exception>
            <exception cref="T:DW.CodedUI.WrongSetupException">Dll is missing or in the wrong version.</exception>
            <remarks>To change the default And settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.WindowFinder.Search(DW.CodedUI.Use,DW.CodedUI.Is)">
            <summary>
            Searches for a window by the given conditions. Default settings are And.Assert().And.Timeout(10000).
            </summary>
            <param name="use">Defines the conditions to be used for searching for a window.</param>
            <param name="is">Defines the relation of the window to another object.</param>
            <returns>The found window if any; otherwise an exception is shown.</returns>
            <exception cref="T:DW.CodedUI.WindowNotFoundException">The window could not be found.</exception>
            <exception cref="T:DW.CodedUI.WrongSetupException">Dll is missing or in the wrong version.</exception>
        </member>
        <member name="M:DW.CodedUI.WindowFinder.Search(DW.CodedUI.Use,DW.CodedUI.And)">
            <summary>
            Searches for a window by the given conditions and settings. If not disabled And.Assert().And.Timeout(10000) gets appended.
            </summary>
            <param name="use">Defines the conditions to be used for searching for a window.</param>
            <param name="settings">Defines the settings to be used while searching.</param>
            <returns>The found window if any; otherwise an exception as long its not disabled by And.NoAssert(). If its disabled the return is null.</returns>
            <exception cref="T:DW.CodedUI.WindowNotFoundException">The window could not be found. (If not disabled.)</exception>
            <exception cref="T:DW.CodedUI.WrongSetupException">Dll is missing or in the wrong version.</exception>
            <remarks>To change the default And settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.WindowFinder.Search(DW.CodedUI.Use,DW.CodedUI.Is,DW.CodedUI.And)">
            <summary>
            Searches for a window by the given conditions and settings. If not disabled And.Assert().And.Timeout(10000) gets appended.
            </summary>
            <param name="use">Defines the conditions to be used for searching for a window.</param>
            <param name="is">Defines the relation of the window to another object.</param>
            <param name="settings">Defines the settings to be used while searching.</param>
            <exception cref="T:DW.CodedUI.WindowNotFoundException">The window could not be found. (If not disabled.)</exception>
            <exception cref="T:DW.CodedUI.WrongSetupException">Dll is missing or in the wrong version.</exception>
            <returns>The found window if any; otherwise an exception as long its not disabled by And.NoAssert(). If its disabled the return is null.</returns>
        </member>
        <member name="M:DW.CodedUI.WindowFinder.Search``1(DW.CodedUI.Use)">
            <summary>
            Searches for window kinds like Window, MessageBox or system dialogs. Default settings are And.Assert().And.Timeout(10000).
            </summary>
            <typeparam name="TWindow">The type of window to be created.</typeparam>
            <param name="use">Defines the conditions to be used for searching for a window.</param>
            <returns>The found window if any; otherwise an exception is shown.</returns>
            <exception cref="T:DW.CodedUI.WindowNotFoundException">The window could not be found.</exception>
            <exception cref="T:DW.CodedUI.WrongSetupException">Dll is missing or in the wrong version.</exception>
            <remarks>To change the default And settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.WindowFinder.Search``1(DW.CodedUI.Use,DW.CodedUI.Is)">
            <summary>
            Searches for window kinds like Window, MessageBox or system dialogs. Default settings are And.Assert().And.Timeout(10000).
            </summary>
            <typeparam name="TWindow">The type of window to be created.</typeparam>
            <param name="use">Defines the conditions to be used for searching for a window.</param>
            <param name="is">Defines the relation of the window to another object.</param>
            <returns>The found window if any; otherwise an exception is shown.</returns>
            <exception cref="T:DW.CodedUI.WindowNotFoundException">The window could not be found.</exception>
            <exception cref="T:DW.CodedUI.WrongSetupException">Dll is missing or in the wrong version.</exception>
            <remarks>To change the default And settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.WindowFinder.Search``1(DW.CodedUI.Use,DW.CodedUI.And)">
            <summary>
            Searches for window kinds like Window, MessageBox or system dialogs. If not disabled And.Assert().And.Timeout(10000) gets appended.
            </summary>
            <typeparam name="TWindow">The type of window to be created.</typeparam>
            <param name="use">Defines the conditions to be used for searching for a window.</param>
            <param name="settings">Defines the settings to be used while searching.</param>
            <returns>The found window if any; otherwise an exception as long its not disabled by And.NoAssert(). If its disabled the return is null.</returns>
            <exception cref="T:DW.CodedUI.WindowNotFoundException">The window could not be found. (If not disabled.)</exception>
            <exception cref="T:DW.CodedUI.WrongSetupException">Dll is missing or in the wrong version.</exception>
            <remarks>To change the default And settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.WindowFinder.Search``1(DW.CodedUI.Use,DW.CodedUI.Is,DW.CodedUI.And)">
            <summary>
            Searches for window kinds like Window, MessageBox or system dialogs. If not disabled And.Assert().And.Timeout(10000) gets appended.
            </summary>
            <typeparam name="TWindow">The type of window to be created.</typeparam>
            <param name="use">Defines the conditions to be used for searching for a window.</param>
            <param name="is">Defines the relation of the window to another object.</param>
            <param name="settings">Defines the settings to be used while searching.</param>
            <returns>The found window if any; otherwise an exception as long its not disabled by And.NoAssert(). If its disabled the return is null.</returns>
            <exception cref="T:DW.CodedUI.WindowNotFoundException">The window could not be found. (If not disabled.)</exception>
            <exception cref="T:DW.CodedUI.WrongSetupException">Dll is missing or in the wrong version.</exception>
            <remarks>To change the default And settings globaly consider changing the values in the <see cref="T:DW.CodedUI.CodedUIEnvironment"/>.</remarks>
        </member>
        <member name="M:DW.CodedUI.WindowFinder.GetForegroundWindow">
            <summary>
            Gets the window which is actually in the foreground.
            </summary>
            <returns>The found window if any; otherwise null.</returns>
            <exception cref="T:DW.CodedUI.WrongSetupException">Dll is missing or in the wrong version.</exception>
        </member>
        <member name="T:DW.CodedUI.WindowNotFoundException">
            <summary>
            Represents errors that occur if an window, dialog or messagebox cannot be found.
            </summary>
        </member>
        <member name="M:DW.CodedUI.WindowNotFoundException.#ctor(DW.CodedUI.Use,System.Boolean,System.Boolean,System.UInt32,System.TimeSpan,DW.CodedUI.Is)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.WindowNotFoundException"/> class.
            </summary>
            <param name="use">The conditions how the window has been searched.</param>
            <param name="useTimeout">A value that indicates if a timeout was used.</param>
            <param name="useInterval">A value that indicates if an interval was used.</param>
            <param name="intervalTime">The time used in the interval.</param>
            <param name="timeout">The elapsed search time.</param>
            <param name="is">The relationship to another object.</param>
        </member>
        <member name="T:DW.CodedUI.WindowState">
            <summary>
            Represents the state of a window.
            </summary>
        </member>
        <member name="F:DW.CodedUI.WindowState.Hidden">
            <summary>
            The window is there but hidden.
            </summary>
        </member>
        <member name="F:DW.CodedUI.WindowState.Normal">
            <summary>
            The window is shown normalized.
            </summary>
        </member>
        <member name="F:DW.CodedUI.WindowState.Minimized">
            <summary>
            The window is shown minimized.
            </summary>
        </member>
        <member name="F:DW.CodedUI.WindowState.Maximized">
            <summary>
            The window is shown maximized.
            </summary>
        </member>
        <member name="T:DW.CodedUI.WrongSetupException">
            <summary>
            Represents the error if the environment is not setup properly to run CodedUI tests.
            </summary>
        </member>
        <member name="M:DW.CodedUI.WrongSetupException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.CodedUI.WrongSetupException"/> class.
            </summary>
            <param name="ex">The inner exception.</param>
        </member>
    </members>
</doc>
